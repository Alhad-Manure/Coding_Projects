
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000126  00800100  00000efe  00000f92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000efe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000065  00800226  00800226  000010b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00001128  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001549  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000083b  00000000  00000000  00002709  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000942  00000000  00000000  00002f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  00003888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b1  00000000  00000000  00003ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e55  00000000  00000000  00003f81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00004dd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_1>
   8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 32       	cpi	r26, 0x26	; 38
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a6 e2       	ldi	r26, 0x26	; 38
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 38       	cpi	r26, 0x8B	; 139
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 32 05 	call	0xa64	; 0xa64 <main>
  9e:	0c 94 7d 07 	jmp	0xefa	; 0xefa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <mcp_write>:
 _delay_ms(500);  	
}			

void mcp_write(char cmd, char data)			//Function to send SPI command 
{	
 PORTB &= 0XFB;								//Set slave select pin to logic 0 to start SPI communication with MCP4131
  a6:	2a 98       	cbi	0x05, 2	; 5
 SPDR = cmd;								//Send Upper 8-bits of 16 bit command, command = Address + Command
  a8:	8e bd       	out	0x2e, r24	; 46
 while((SPSR & 0x80) != 0x80){}				//wait till transmission is complete ** SPIF  WCOL –  –  –  –  –  SPI2X **
  aa:	0d b4       	in	r0, 0x2d	; 45
  ac:	07 fe       	sbrs	r0, 7
  ae:	fd cf       	rjmp	.-6      	; 0xaa <mcp_write+0x4>
 SPDR = data;			     				//Send Lower 8-bits of 16 bit command, Data
  b0:	6e bd       	out	0x2e, r22	; 46
 while((SPSR & 0x80) != 0x80){}				//wait till transmission is complete
  b2:	0d b4       	in	r0, 0x2d	; 45
  b4:	07 fe       	sbrs	r0, 7
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <mcp_write+0xc>
 PORTB |= 0X04;								//Set slave select pin to logic 1 to stop SPI communication with MCP4131	 
  b8:	2a 9a       	sbi	0x05, 2	; 5
  ba:	08 95       	ret

000000bc <genen>:
}

void genen()								//Function to create pulse at LCD Enable pin
{
 PORTB &= 0b11111101;						//Enable pin is made LOW
  bc:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	8f e9       	ldi	r24, 0x9F	; 159
  c0:	9f e0       	ldi	r25, 0x0F	; 15
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <genen+0x6>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <genen+0xc>
  c8:	00 00       	nop
 _delay_ms(1);
 PORTB |= 0b00000010;						//Enable pin is made HIGH
  ca:	29 9a       	sbi	0x05, 1	; 5
  cc:	8f e9       	ldi	r24, 0x9F	; 159
  ce:	9f e0       	ldi	r25, 0x0F	; 15
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <genen+0x14>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <genen+0x1a>
  d6:	00 00       	nop
 _delay_ms(1);
 PORTB &= 0b11111101;						//Enable pin is made LOW
  d8:	29 98       	cbi	0x05, 1	; 5
  da:	08 95       	ret

000000dc <wrcmd>:
}

void wrcmd(char c)							//Function to write command to LCD
{
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
 PORTB &= 0b11111110;						//Set LCD RS pin to logic 0
  e0:	28 98       	cbi	0x05, 0	; 5
 PORTC = (((c & 0xf0)>>2) | 0x03);			//Send Upper 4 bits of command keeping External interrupt 0 & External interrupt 1 pins as input pins with pull up resistor active 
  e2:	80 7f       	andi	r24, 0xF0	; 240
  e4:	86 95       	lsr	r24
  e6:	86 95       	lsr	r24
  e8:	83 60       	ori	r24, 0x03	; 3
  ea:	88 b9       	out	0x08, r24	; 8
 genen();
  ec:	0e 94 5e 00 	call	0xbc	; 0xbc <genen>
 PORTC = (((c & 0x0f)<<2) | 0x03);			//Send Lower 4 bits of command keeping External interrupt 0 & External interrupt 1 pins as input pins with pull up resistor active
  f0:	cf 70       	andi	r28, 0x0F	; 15
  f2:	cc 0f       	add	r28, r28
  f4:	cc 0f       	add	r28, r28
  f6:	c3 60       	ori	r28, 0x03	; 3
  f8:	c8 b9       	out	0x08, r28	; 8
 genen();
  fa:	0e 94 5e 00 	call	0xbc	; 0xbc <genen>
  fe:	8f e3       	ldi	r24, 0x3F	; 63
 100:	9f e1       	ldi	r25, 0x1F	; 31
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <wrcmd+0x26>
 106:	00 c0       	rjmp	.+0      	; 0x108 <wrcmd+0x2c>
 108:	00 00       	nop
 _delay_ms(2);	
}
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <wrdata>:

void wrdata(char c)							//Function to write data to LCD
{
 10e:	cf 93       	push	r28
 110:	c8 2f       	mov	r28, r24
 PORTB |= 0b00000001;						//Set LCD RS pin to logic 1
 112:	28 9a       	sbi	0x05, 0	; 5
 PORTC = (((c & 0xf0)>>2) | 0x03);			//Send Upper 4 bits of data keeping External interrupt 0 & External interrupt 1 pins as input pins with pull up resistor active
 114:	80 7f       	andi	r24, 0xF0	; 240
 116:	86 95       	lsr	r24
 118:	86 95       	lsr	r24
 11a:	83 60       	ori	r24, 0x03	; 3
 11c:	88 b9       	out	0x08, r24	; 8
 genen();
 11e:	0e 94 5e 00 	call	0xbc	; 0xbc <genen>
 PORTC = (((c & 0x0f)<<2) | 0x03);			//Send Lower 4 bits of data keeping External interrupt 0 & External interrupt 1 pins as input pins with pull up resistor active
 122:	cf 70       	andi	r28, 0x0F	; 15
 124:	cc 0f       	add	r28, r28
 126:	cc 0f       	add	r28, r28
 128:	c3 60       	ori	r28, 0x03	; 3
 12a:	c8 b9       	out	0x08, r28	; 8
 genen();
 12c:	0e 94 5e 00 	call	0xbc	; 0xbc <genen>
 130:	8f e3       	ldi	r24, 0x3F	; 63
 132:	9f e1       	ldi	r25, 0x1F	; 31
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <wrdata+0x26>
 138:	00 c0       	rjmp	.+0      	; 0x13a <wrdata+0x2c>
 13a:	00 00       	nop
 _delay_ms(2);
}
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <lcd_print>:

void lcd_print(char *ptr)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	ec 01       	movw	r28, r24
 while(*ptr)                                //Loop still string doesn't ends
 146:	88 81       	ld	r24, Y
 148:	88 23       	and	r24, r24
 14a:	31 f0       	breq	.+12     	; 0x158 <lcd_print+0x18>
 14c:	21 96       	adiw	r28, 0x01	; 1
 {
  wrdata(*ptr);								//Write current character to LCD
 14e:	0e 94 87 00 	call	0x10e	; 0x10e <wrdata>
 _delay_ms(2);
}

void lcd_print(char *ptr)
{
 while(*ptr)                                //Loop still string doesn't ends
 152:	89 91       	ld	r24, Y+
 154:	81 11       	cpse	r24, r1
 156:	fb cf       	rjmp	.-10     	; 0x14e <lcd_print+0xe>
 {
  wrdata(*ptr);								//Write current character to LCD
  ptr++;                                    //Increment Pointer position
 }
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <__vector_2>:
 }
 EIFR |= 1<<INTF0;								//Clear the External interrupt 0 flag
}

ISR(INT1_vect)									// Start or Stop charging
{
 15e:	1f 92       	push	r1
 160:	0f 92       	push	r0
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	0f 92       	push	r0
 166:	11 24       	eor	r1, r1
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
 str_stp ^= 0xFF;								//Complement the last state if charging is on turn it off and vice versa
 180:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 184:	80 95       	com	r24
 186:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <__data_end>
 if(str_stp == 0xFF)							
 18a:	8f 3f       	cpi	r24, 0xFF	; 255
 18c:	b1 f4       	brne	.+44     	; 0x1ba <__vector_2+0x5c>
 {
  wrcmd(0x01);
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
  wrcmd(0x80); 
 194:	80 e8       	ldi	r24, 0x80	; 128
 196:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
  if(start == 1)								//Check whether cell count is already set if not return
 19a:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <start>
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	29 f4       	brne	.+10     	; 0x1ac <__vector_2+0x4e>
  {
   lcd_print("Charging On     ");  
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
 1aa:	13 c0       	rjmp	.+38     	; 0x1d2 <__vector_2+0x74>
  }
  else
  {
   lcd_print("!Set cell count!");
 1ac:	81 e1       	ldi	r24, 0x11	; 17
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
   str_stp = 0x00;	  
 1b4:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <__data_end>
 1b8:	0c c0       	rjmp	.+24     	; 0x1d2 <__vector_2+0x74>
  }	   	 	 
 }
 else if(str_stp == 0x00)						
 1ba:	81 11       	cpse	r24, r1
 1bc:	0a c0       	rjmp	.+20     	; 0x1d2 <__vector_2+0x74>
 {
  wrcmd(0x01);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
  wrcmd(0x80);
 1c4:	80 e8       	ldi	r24, 0x80	; 128
 1c6:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
  lcd_print("Charging OFF"); 
 1ca:	82 e2       	ldi	r24, 0x22	; 34
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
 }									
 EIFR |= 1<<INTF1;							//Clear the External interrupt 1 flag
 1d2:	e1 9a       	sbi	0x1c, 1	; 28
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	89 e6       	ldi	r24, 0x69	; 105
 1d8:	98 e1       	ldi	r25, 0x18	; 24
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <__vector_2+0x7c>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <__vector_2+0x86>
 1e4:	00 00       	nop
 _delay_ms(500);  	
}			
 1e6:	ff 91       	pop	r31
 1e8:	ef 91       	pop	r30
 1ea:	bf 91       	pop	r27
 1ec:	af 91       	pop	r26
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	7f 91       	pop	r23
 1f4:	6f 91       	pop	r22
 1f6:	5f 91       	pop	r21
 1f8:	4f 91       	pop	r20
 1fa:	3f 91       	pop	r19
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <lcd_init>:
 208:	8f e5       	ldi	r24, 0x5F	; 95
 20a:	9a ee       	ldi	r25, 0xEA	; 234
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <lcd_init+0x4>
 210:	00 c0       	rjmp	.+0      	; 0x212 <lcd_init+0xa>
 212:	00 00       	nop
}

void lcd_init()								//Function to Initialize LCD
{
 _delay_ms(15);
 wrcmd(0x3F);								//Function set command
 214:	8f e3       	ldi	r24, 0x3F	; 63
 216:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
 21a:	8f e1       	ldi	r24, 0x1F	; 31
 21c:	9e e4       	ldi	r25, 0x4E	; 78
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <lcd_init+0x16>
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_init+0x1c>
 224:	00 00       	nop
 _delay_ms(5);
 wrcmd(0x3F);								//Function set command
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
 22c:	8f e9       	ldi	r24, 0x9F	; 159
 22e:	9f e0       	ldi	r25, 0x0F	; 15
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <lcd_init+0x28>
 234:	00 c0       	rjmp	.+0      	; 0x236 <lcd_init+0x2e>
 236:	00 00       	nop
 _delay_ms(1);
 wrcmd(0x3F);								//Function set command
 238:	8f e3       	ldi	r24, 0x3F	; 63
 23a:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
 wrcmd(0x02);								//4 bit lcd interface
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
 wrcmd(0x28);								//4 bit lcd interface with 2 rows 
 244:	88 e2       	ldi	r24, 0x28	; 40
 246:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
 wrcmd(0x08);								//display off command
 24a:	88 e0       	ldi	r24, 0x08	; 8
 24c:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
 wrcmd(0x01);								//clear display command
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
 wrcmd(0x06);								//
 256:	86 e0       	ldi	r24, 0x06	; 6
 258:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
 wrcmd(0x0c);								//display on command
 25c:	8c e0       	ldi	r24, 0x0C	; 12
 25e:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
 wrcmd(0x80);								//set cursor to row 0 and column 0
 262:	80 e8       	ldi	r24, 0x80	; 128
 264:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
 268:	08 95       	ret

0000026a <ADC_result>:
}

float ADC_result(char i)					//Function to read voltage at ADC pin
{
 float tmp;
 ADMUX = ((ADMUX & 0xF0) | (i & 0x0F));		//Select the ADC channel; voltage = 0, current = 1; **REFS1  REFS0  ADLAR  –  MUX3  MUX2  MUX1  MUX0 
 26a:	ec e7       	ldi	r30, 0x7C	; 124
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	90 81       	ld	r25, Z
 270:	90 7f       	andi	r25, 0xF0	; 240
 272:	8f 70       	andi	r24, 0x0F	; 15
 274:	89 2b       	or	r24, r25
 276:	80 83       	st	Z, r24
 ADCSRA |= 0x40;							//Start the reading **ADEN     ADSC    ADATE    ADIF      ADIE    ADPS2    ADPS1    ADPS0
 278:	ea e7       	ldi	r30, 0x7A	; 122
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	80 81       	ld	r24, Z
 27e:	80 64       	ori	r24, 0x40	; 64
 280:	80 83       	st	Z, r24
 while((ADCSRA & 0x10)!=0x10){}				//Wait still reading is complete
 282:	80 81       	ld	r24, Z
 284:	84 ff       	sbrs	r24, 4
 286:	fd cf       	rjmp	.-6      	; 0x282 <ADC_result+0x18>
 ADCSRA |= 0x10;							//Clear ADIF flag
 288:	ea e7       	ldi	r30, 0x7A	; 122
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	80 61       	ori	r24, 0x10	; 16
 290:	80 83       	st	Z, r24
 tmp = (ADCL | (ADCH << 8));				//read 10 bit ADC result
 292:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 296:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 return tmp;								//Return the result
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	78 2b       	or	r23, r24
 29e:	07 2e       	mov	r0, r23
 2a0:	00 0c       	add	r0, r0
 2a2:	88 0b       	sbc	r24, r24
 2a4:	99 0b       	sbc	r25, r25
 2a6:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatsisf>
}
 2aa:	08 95       	ret

000002ac <averager>:

float averager(uint8_t flg_1)				//Function to take average of last 10 ADC readings to obtain stable & faithful reading  
{
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 uint8_t j;
 float res=0;	
 if(flg_1 == 1)								//If flg_1==1 then take average of Charging current
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	79 f5       	brne	.+94     	; 0x316 <averager+0x6a>
 {
  current_avg[I] = charge_current;			//Add last reading of ADC to next position of array of last 10 readings
 2b8:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <I>
 2bc:	e8 2f       	mov	r30, r24
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	ee 0f       	add	r30, r30
 2c2:	ff 1f       	adc	r31, r31
 2c4:	ee 0f       	add	r30, r30
 2c6:	ff 1f       	adc	r31, r31
 2c8:	ef 5c       	subi	r30, 0xCF	; 207
 2ca:	fd 4f       	sbci	r31, 0xFD	; 253
 2cc:	40 91 87 02 	lds	r20, 0x0287	; 0x800287 <charge_current>
 2d0:	50 91 88 02 	lds	r21, 0x0288	; 0x800288 <charge_current+0x1>
 2d4:	60 91 89 02 	lds	r22, 0x0289	; 0x800289 <charge_current+0x2>
 2d8:	70 91 8a 02 	lds	r23, 0x028A	; 0x80028a <charge_current+0x3>
 2dc:	40 83       	st	Z, r20
 2de:	51 83       	std	Z+1, r21	; 0x01
 2e0:	62 83       	std	Z+2, r22	; 0x02
 2e2:	73 83       	std	Z+3, r23	; 0x03
  I++;
 2e4:	8f 5f       	subi	r24, 0xFF	; 255
  if(I == 10)                               //Check if index overflows 
 2e6:	8a 30       	cpi	r24, 0x0A	; 10
 2e8:	19 f0       	breq	.+6      	; 0x2f0 <averager+0x44>
 uint8_t j;
 float res=0;	
 if(flg_1 == 1)								//If flg_1==1 then take average of Charging current
 {
  current_avg[I] = charge_current;			//Add last reading of ADC to next position of array of last 10 readings
  I++;
 2ea:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <I>
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <averager+0x48>
  if(I == 10)                               //Check if index overflows 
  {
   I = 0;
 2f0:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <I>
 2f4:	c1 e3       	ldi	r28, 0x31	; 49
 2f6:	d2 e0       	ldi	r29, 0x02	; 2
 2f8:	09 e5       	ldi	r16, 0x59	; 89
 2fa:	12 e0       	ldi	r17, 0x02	; 2
}

float averager(uint8_t flg_1)				//Function to take average of last 10 ADC readings to obtain stable & faithful reading  
{
 uint8_t j;
 float res=0;	
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	cb 01       	movw	r24, r22
  {
   I = 0;
  }
  for(j=0;j<10;j++)
  {
   res += current_avg[j];					//Sum last 10 Charging current the results  
 302:	29 91       	ld	r18, Y+
 304:	39 91       	ld	r19, Y+
 306:	49 91       	ld	r20, Y+
 308:	59 91       	ld	r21, Y+
 30a:	0e 94 38 05 	call	0xa70	; 0xa70 <__addsf3>
  I++;
  if(I == 10)                               //Check if index overflows 
  {
   I = 0;
  }
  for(j=0;j<10;j++)
 30e:	c0 17       	cp	r28, r16
 310:	d1 07       	cpc	r29, r17
 312:	b9 f7       	brne	.-18     	; 0x302 <averager+0x56>
 314:	34 c0       	rjmp	.+104    	; 0x37e <averager+0xd2>
  {
   res += current_avg[j];					//Sum last 10 Charging current the results  
  } 
 }
 else if(flg_1 == 2)						//If flg_1 ==1 then take average of Battery voltage
 316:	82 30       	cpi	r24, 0x02	; 2
 318:	79 f5       	brne	.+94     	; 0x378 <averager+0xcc>
 {
  voltage_avg[V] = battery_voltage;			//Add last reading of ADC to next position of array of last 10 readings
 31a:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <V>
 31e:	e8 2f       	mov	r30, r24
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	ee 0f       	add	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	ee 0f       	add	r30, r30
 328:	ff 1f       	adc	r31, r31
 32a:	e7 5a       	subi	r30, 0xA7	; 167
 32c:	fd 4f       	sbci	r31, 0xFD	; 253
 32e:	40 91 2d 02 	lds	r20, 0x022D	; 0x80022d <battery_voltage>
 332:	50 91 2e 02 	lds	r21, 0x022E	; 0x80022e <battery_voltage+0x1>
 336:	60 91 2f 02 	lds	r22, 0x022F	; 0x80022f <battery_voltage+0x2>
 33a:	70 91 30 02 	lds	r23, 0x0230	; 0x800230 <battery_voltage+0x3>
 33e:	40 83       	st	Z, r20
 340:	51 83       	std	Z+1, r21	; 0x01
 342:	62 83       	std	Z+2, r22	; 0x02
 344:	73 83       	std	Z+3, r23	; 0x03
  V++;
 346:	8f 5f       	subi	r24, 0xFF	; 255
  if(V == 10)								//Check if index overflows
 348:	8a 30       	cpi	r24, 0x0A	; 10
 34a:	19 f0       	breq	.+6      	; 0x352 <averager+0xa6>
  } 
 }
 else if(flg_1 == 2)						//If flg_1 ==1 then take average of Battery voltage
 {
  voltage_avg[V] = battery_voltage;			//Add last reading of ADC to next position of array of last 10 readings
  V++;
 34c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <V>
 350:	02 c0       	rjmp	.+4      	; 0x356 <averager+0xaa>
  if(V == 10)								//Check if index overflows
  {
   V = 0;
 352:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <V>
 356:	c9 e5       	ldi	r28, 0x59	; 89
 358:	d2 e0       	ldi	r29, 0x02	; 2
 35a:	01 e8       	ldi	r16, 0x81	; 129
 35c:	12 e0       	ldi	r17, 0x02	; 2
}

float averager(uint8_t flg_1)				//Function to take average of last 10 ADC readings to obtain stable & faithful reading  
{
 uint8_t j;
 float res=0;	
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	cb 01       	movw	r24, r22
  {
   V = 0;
  }
  for(j=0;j<10;j++)
  {
   res += voltage_avg[j];					//Sum last 10 Battery voltage results
 364:	29 91       	ld	r18, Y+
 366:	39 91       	ld	r19, Y+
 368:	49 91       	ld	r20, Y+
 36a:	59 91       	ld	r21, Y+
 36c:	0e 94 38 05 	call	0xa70	; 0xa70 <__addsf3>
  V++;
  if(V == 10)								//Check if index overflows
  {
   V = 0;
  }
  for(j=0;j<10;j++)
 370:	c0 17       	cp	r28, r16
 372:	d1 07       	cpc	r29, r17
 374:	b9 f7       	brne	.-18     	; 0x364 <averager+0xb8>
 376:	03 c0       	rjmp	.+6      	; 0x37e <averager+0xd2>
}

float averager(uint8_t flg_1)				//Function to take average of last 10 ADC readings to obtain stable & faithful reading  
{
 uint8_t j;
 float res=0;	
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	cb 01       	movw	r24, r22
  {
   res += voltage_avg[j];					//Sum last 10 Battery voltage results
  } 	 
 }
 res = (res / 10);						    //Calculate average of results
 return res;								//Return the result
 37e:	20 e0       	ldi	r18, 0x00	; 0
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	40 e2       	ldi	r20, 0x20	; 32
 384:	51 e4       	ldi	r21, 0x41	; 65
 386:	0e 94 a9 05 	call	0xb52	; 0xb52 <__divsf3>
} 
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	08 95       	ret

00000394 <measure_bat_voltage>:

void measure_bat_voltage()							//Function to find current Battery voltage
{
 394:	cf 92       	push	r12
 396:	df 92       	push	r13
 398:	ef 92       	push	r14
 39a:	ff 92       	push	r15
 battery_voltage = ADC_result(0);					//ADC pin 0 for Battery voltage 
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	0e 94 35 01 	call	0x26a	; 0x26a <ADC_result>
 3a2:	6b 01       	movw	r12, r22
 3a4:	7c 01       	movw	r14, r24
 battery_voltage = s * 0.0048 * battery_voltage;    //S value i.e. battery count is set in External interrupt 1
 3a6:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <s>
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatsisf>
 3b4:	22 e5       	ldi	r18, 0x52	; 82
 3b6:	39 e4       	ldi	r19, 0x49	; 73
 3b8:	4d e9       	ldi	r20, 0x9D	; 157
 3ba:	5b e3       	ldi	r21, 0x3B	; 59
 3bc:	0e 94 01 07 	call	0xe02	; 0xe02 <__mulsf3>
 3c0:	a7 01       	movw	r20, r14
 3c2:	96 01       	movw	r18, r12
 3c4:	0e 94 01 07 	call	0xe02	; 0xe02 <__mulsf3>
 3c8:	60 93 2d 02 	sts	0x022D, r22	; 0x80022d <battery_voltage>
 3cc:	70 93 2e 02 	sts	0x022E, r23	; 0x80022e <battery_voltage+0x1>
 3d0:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <battery_voltage+0x2>
 3d4:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <battery_voltage+0x3>
 cur_avg_volt = averager(2);						//Average of last ten battery voltage readings i.e actual current battery voltage
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	0e 94 56 01 	call	0x2ac	; 0x2ac <averager>
 3de:	60 93 82 02 	sts	0x0282, r22	; 0x800282 <cur_avg_volt>
 3e2:	70 93 83 02 	sts	0x0283, r23	; 0x800283 <cur_avg_volt+0x1>
 3e6:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <cur_avg_volt+0x2>
 3ea:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <cur_avg_volt+0x3>
 3ee:	2f ef       	ldi	r18, 0xFF	; 255
 3f0:	80 e7       	ldi	r24, 0x70	; 112
 3f2:	92 e0       	ldi	r25, 0x02	; 2
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	80 40       	sbci	r24, 0x00	; 0
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <measure_bat_voltage+0x60>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <measure_bat_voltage+0x6a>
 3fe:	00 00       	nop
 _delay_ms(50); 
}
 400:	ff 90       	pop	r15
 402:	ef 90       	pop	r14
 404:	df 90       	pop	r13
 406:	cf 90       	pop	r12
 408:	08 95       	ret

0000040a <__vector_1>:
 */ 

#include "head.h"

ISR(INT0_vect)								//Set the cell count
{ 
 40a:	1f 92       	push	r1
 40c:	0f 92       	push	r0
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	0f 92       	push	r0
 412:	11 24       	eor	r1, r1
 414:	2f 93       	push	r18
 416:	3f 93       	push	r19
 418:	4f 93       	push	r20
 41a:	5f 93       	push	r21
 41c:	6f 93       	push	r22
 41e:	7f 93       	push	r23
 420:	8f 93       	push	r24
 422:	9f 93       	push	r25
 424:	af 93       	push	r26
 426:	bf 93       	push	r27
 428:	cf 93       	push	r28
 42a:	ef 93       	push	r30
 42c:	ff 93       	push	r31
 uint8_t i;	   	
 if(str_stp == 0xFF)						//If charging is in progress stop it first before setting new cell count
 42e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 432:	8f 3f       	cpi	r24, 0xFF	; 255
 434:	d9 f4       	brne	.+54     	; 0x46c <__vector_1+0x62>
 {
  wrcmd(0x01);
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
  wrcmd(0x80);	 
 43c:	80 e8       	ldi	r24, 0x80	; 128
 43e:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
  lcd_print("First stop the  ");
 442:	8f e2       	ldi	r24, 0x2F	; 47
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
  wrcmd(0xC0);
 44a:	80 ec       	ldi	r24, 0xC0	; 192
 44c:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
  lcd_print("Charging");
 450:	80 e4       	ldi	r24, 0x40	; 64
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
 458:	2f ef       	ldi	r18, 0xFF	; 255
 45a:	89 e6       	ldi	r24, 0x69	; 105
 45c:	98 e1       	ldi	r25, 0x18	; 24
 45e:	21 50       	subi	r18, 0x01	; 1
 460:	80 40       	sbci	r24, 0x00	; 0
 462:	90 40       	sbci	r25, 0x00	; 0
 464:	e1 f7       	brne	.-8      	; 0x45e <__vector_1+0x54>
 466:	00 c0       	rjmp	.+0      	; 0x468 <__vector_1+0x5e>
 468:	00 00       	nop
 46a:	3e c0       	rjmp	.+124    	; 0x4e8 <__vector_1+0xde>
  _delay_ms(500);
 }
 else										//If charging is not in progress set the cell count for charging
 {	
  s++;
 46c:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <s>
 470:	8f 5f       	subi	r24, 0xFF	; 255
 472:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <s>
  if(s > 3)
 476:	84 30       	cpi	r24, 0x04	; 4
 478:	c8 f1       	brcs	.+114    	; 0x4ec <__vector_1+0xe2>
  {
   s = 1;	 
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <s>
  }
  switch(s)
  {
	case 1:
	{
	 mcp_write(0x11, 66);				    //AD3:AD0 + C1:C0 + D9:D8 + D7:D0  (According to datasheet Address 0x00 for wiper 0 and write data command is c1:C0 = 00 
 480:	62 e4       	ldi	r22, 0x42	; 66
 482:	81 e1       	ldi	r24, 0x11	; 17
 484:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp_write>
	 wrcmd(0x01);
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
	 wrcmd(0x80);
 48e:	80 e8       	ldi	r24, 0x80	; 128
 490:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
	 lcd_print("1S Battery mode ");
 494:	89 e4       	ldi	r24, 0x49	; 73
 496:	91 e0       	ldi	r25, 0x01	; 1
 498:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
	 break;	
 49c:	1d c0       	rjmp	.+58     	; 0x4d8 <__vector_1+0xce>
	}
	case 2:
	{
	 mcp_write(0x11, 149);
 49e:	65 e9       	ldi	r22, 0x95	; 149
 4a0:	81 e1       	ldi	r24, 0x11	; 17
 4a2:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp_write>
	 wrcmd(0x01);
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
	 wrcmd(0x80);
 4ac:	80 e8       	ldi	r24, 0x80	; 128
 4ae:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
	 lcd_print("2S Battery mode ");
 4b2:	8a e5       	ldi	r24, 0x5A	; 90
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
	 break;
 4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <__vector_1+0xce>
	}
	case 3:
	{
	 mcp_write(0x11, 235);
 4bc:	6b ee       	ldi	r22, 0xEB	; 235
 4be:	81 e1       	ldi	r24, 0x11	; 17
 4c0:	0e 94 53 00 	call	0xa6	; 0xa6 <mcp_write>
	 wrcmd(0x01);
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
	 wrcmd(0x80);
 4ca:	80 e8       	ldi	r24, 0x80	; 128
 4cc:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
	 lcd_print("3S Battery mode ");
 4d0:	8b e6       	ldi	r24, 0x6B	; 107
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
 */ 

#include "head.h"

ISR(INT0_vect)								//Set the cell count
{ 
 4d8:	ca e0       	ldi	r28, 0x0A	; 10
	 break;
	}  
   }
   for(i=0;i<10;i++)
   {
	measure_bat_voltage();						//Find current Battery voltage 
 4da:	0e 94 ca 01 	call	0x394	; 0x394 <measure_bat_voltage>
 4de:	c1 50       	subi	r28, 0x01	; 1
	 wrcmd(0x80);
	 lcd_print("3S Battery mode ");
	 break;
	}  
   }
   for(i=0;i<10;i++)
 4e0:	e1 f7       	brne	.-8      	; 0x4da <__vector_1+0xd0>
   {
	measure_bat_voltage();						//Find current Battery voltage 
   }
   start=1;										//Flag to confirm whether the Battery count is set.
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <start>
 }
 EIFR |= 1<<INTF0;								//Clear the External interrupt 0 flag
 4e8:	e0 9a       	sbi	0x1c, 0	; 28
}
 4ea:	07 c0       	rjmp	.+14     	; 0x4fa <__vector_1+0xf0>
  s++;
  if(s > 3)
  {
   s = 1;	 
  }
  switch(s)
 4ec:	82 30       	cpi	r24, 0x02	; 2
 4ee:	b9 f2       	breq	.-82     	; 0x49e <__vector_1+0x94>
 4f0:	83 30       	cpi	r24, 0x03	; 3
 4f2:	21 f3       	breq	.-56     	; 0x4bc <__vector_1+0xb2>
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	81 f7       	brne	.-32     	; 0x4d8 <__vector_1+0xce>
 4f8:	c3 cf       	rjmp	.-122    	; 0x480 <__vector_1+0x76>
	measure_bat_voltage();						//Find current Battery voltage 
   }
   start=1;										//Flag to confirm whether the Battery count is set.
 }
 EIFR |= 1<<INTF0;								//Clear the External interrupt 0 flag
}
 4fa:	ff 91       	pop	r31
 4fc:	ef 91       	pop	r30
 4fe:	cf 91       	pop	r28
 500:	bf 91       	pop	r27
 502:	af 91       	pop	r26
 504:	9f 91       	pop	r25
 506:	8f 91       	pop	r24
 508:	7f 91       	pop	r23
 50a:	6f 91       	pop	r22
 50c:	5f 91       	pop	r21
 50e:	4f 91       	pop	r20
 510:	3f 91       	pop	r19
 512:	2f 91       	pop	r18
 514:	0f 90       	pop	r0
 516:	0f be       	out	0x3f, r0	; 63
 518:	0f 90       	pop	r0
 51a:	1f 90       	pop	r1
 51c:	18 95       	reti

0000051e <measure_charge_current>:
 _delay_ms(50); 
}

void measure_charge_current()						//Function to find current Charging current
{
 charge_current = ADC_result(1);					//ADC pin 1 for Charging current i.e actual current battery charging current
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	0e 94 35 01 	call	0x26a	; 0x26a <ADC_result>
 charge_current = 0.0269 * (charge_current - 512);	//Converting analog output of ACS712-5B to actual current value
 524:	20 e0       	ldi	r18, 0x00	; 0
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	40 e0       	ldi	r20, 0x00	; 0
 52a:	54 e4       	ldi	r21, 0x44	; 68
 52c:	0e 94 37 05 	call	0xa6e	; 0xa6e <__subsf3>
 530:	24 e6       	ldi	r18, 0x64	; 100
 532:	3d e5       	ldi	r19, 0x5D	; 93
 534:	4c ed       	ldi	r20, 0xDC	; 220
 536:	5c e3       	ldi	r21, 0x3C	; 60
 538:	0e 94 01 07 	call	0xe02	; 0xe02 <__mulsf3>
 53c:	60 93 87 02 	sts	0x0287, r22	; 0x800287 <charge_current>
 540:	70 93 88 02 	sts	0x0288, r23	; 0x800288 <charge_current+0x1>
 544:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <charge_current+0x2>
 548:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <charge_current+0x3>
 cur_avg_curr = averager(1);						//Average of last ten charging current readings 
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	0e 94 56 01 	call	0x2ac	; 0x2ac <averager>
 552:	60 93 29 02 	sts	0x0229, r22	; 0x800229 <cur_avg_curr>
 556:	70 93 2a 02 	sts	0x022A, r23	; 0x80022a <cur_avg_curr+0x1>
 55a:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <cur_avg_curr+0x2>
 55e:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <cur_avg_curr+0x3>
 562:	08 95       	ret

00000564 <mode_select>:
}

void mode_select()									//Function to automatically decide the current mode of charging 
{
 564:	cf 92       	push	r12
 566:	df 92       	push	r13
 568:	ef 92       	push	r14
 56a:	ff 92       	push	r15
 if(str_stp == 0x00)								//If charging is not ON just wait and display menu
 56c:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 570:	81 11       	cpse	r24, r1
 572:	1f c0       	rjmp	.+62     	; 0x5b2 <mode_select+0x4e>
 {
  wrcmd(0x01);
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
  wrcmd(0x80);
 57a:	80 e8       	ldi	r24, 0x80	; 128
 57c:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
  lcd_print("Menu-");
 580:	8c e7       	ldi	r24, 0x7C	; 124
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
  lcd_print(" Mode: key1");
 588:	82 e8       	ldi	r24, 0x82	; 130
 58a:	91 e0       	ldi	r25, 0x01	; 1
 58c:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
  wrcmd(0xC5);
 590:	85 ec       	ldi	r24, 0xC5	; 197
 592:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
  lcd_print("Start: key2");
 596:	8e e8       	ldi	r24, 0x8E	; 142
 598:	91 e0       	ldi	r25, 0x01	; 1
 59a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
 59e:	2f ef       	ldi	r18, 0xFF	; 255
 5a0:	89 ef       	ldi	r24, 0xF9	; 249
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	21 50       	subi	r18, 0x01	; 1
 5a6:	80 40       	sbci	r24, 0x00	; 0
 5a8:	90 40       	sbci	r25, 0x00	; 0
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <mode_select+0x40>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <mode_select+0x4a>
 5ae:	00 00       	nop
 5b0:	15 c1       	rjmp	.+554    	; 0x7dc <mode_select+0x278>
  _delay_ms(20); 
 }  	
 else if(str_stp == 0xFF && start == 1)				//Checking Battery status
 5b2:	8f 3f       	cpi	r24, 0xFF	; 255
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <mode_select+0x54>
 5b6:	12 c1       	rjmp	.+548    	; 0x7dc <mode_select+0x278>
 5b8:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <start>
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	09 f0       	breq	.+2      	; 0x5c2 <mode_select+0x5e>
 5c0:	0d c1       	rjmp	.+538    	; 0x7dc <mode_select+0x278>
 {
	 
  wrcmd(0x01);
 5c2:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
  wrcmd(0x80);
 5c6:	80 e8       	ldi	r24, 0x80	; 128
 5c8:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
  lcd_print("Battery");
 5cc:	8a e9       	ldi	r24, 0x9A	; 154
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
 5d4:	2f ef       	ldi	r18, 0xFF	; 255
 5d6:	83 ec       	ldi	r24, 0xC3	; 195
 5d8:	99 e0       	ldi	r25, 0x09	; 9
 5da:	21 50       	subi	r18, 0x01	; 1
 5dc:	80 40       	sbci	r24, 0x00	; 0
 5de:	90 40       	sbci	r25, 0x00	; 0
 5e0:	e1 f7       	brne	.-8      	; 0x5da <mode_select+0x76>
 5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <mode_select+0x80>
 5e4:	00 00       	nop
  _delay_ms(200);	 
  wrcmd(0x01);
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
  wrcmd(0x80);	 	 	
 5ec:	80 e8       	ldi	r24, 0x80	; 128
 5ee:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
  if((cur_avg_volt / s) <= 1)					    //Check if battery is over-discharged or not connected
 5f2:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <s>
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatsisf>
 600:	9b 01       	movw	r18, r22
 602:	ac 01       	movw	r20, r24
 604:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <cur_avg_volt>
 608:	70 91 83 02 	lds	r23, 0x0283	; 0x800283 <cur_avg_volt+0x1>
 60c:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <cur_avg_volt+0x2>
 610:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <cur_avg_volt+0x3>
 614:	0e 94 a9 05 	call	0xb52	; 0xb52 <__divsf3>
 618:	6b 01       	movw	r12, r22
 61a:	7c 01       	movw	r14, r24
 61c:	20 e0       	ldi	r18, 0x00	; 0
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	40 e8       	ldi	r20, 0x80	; 128
 622:	5f e3       	ldi	r21, 0x3F	; 63
 624:	0e 94 a4 05 	call	0xb48	; 0xb48 <__cmpsf2>
 628:	18 16       	cp	r1, r24
 62a:	c4 f0       	brlt	.+48     	; 0x65c <mode_select+0xf8>
  {
   PORTD |= 1<<5;									//Keep charging OFF
 62c:	5d 9a       	sbi	0x0b, 5	; 11
   lcd_print("Battery not     ");
 62e:	82 ea       	ldi	r24, 0xA2	; 162
 630:	91 e0       	ldi	r25, 0x01	; 1
 632:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
 636:	2f ef       	ldi	r18, 0xFF	; 255
 638:	89 ef       	ldi	r24, 0xF9	; 249
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	21 50       	subi	r18, 0x01	; 1
 63e:	80 40       	sbci	r24, 0x00	; 0
 640:	90 40       	sbci	r25, 0x00	; 0
 642:	e1 f7       	brne	.-8      	; 0x63c <mode_select+0xd8>
 644:	00 c0       	rjmp	.+0      	; 0x646 <mode_select+0xe2>
 646:	00 00       	nop
   _delay_ms(20);
   wrcmd(0xC0);
 648:	80 ec       	ldi	r24, 0xC0	; 192
 64a:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
   lcd_print("connected       ");
 64e:	83 eb       	ldi	r24, 0xB3	; 179
 650:	91 e0       	ldi	r25, 0x01	; 1
 652:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
   measure_bat_voltage();						    //Keep checking current battery voltage	  
 656:	0e 94 ca 01 	call	0x394	; 0x394 <measure_bat_voltage>
 65a:	c0 c0       	rjmp	.+384    	; 0x7dc <mode_select+0x278>
  } 	  
  else if((cur_avg_volt / s) <= 3)				    //If Over discharged battery cut off the charging
 65c:	20 e0       	ldi	r18, 0x00	; 0
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	40 e4       	ldi	r20, 0x40	; 64
 662:	50 e4       	ldi	r21, 0x40	; 64
 664:	c7 01       	movw	r24, r14
 666:	b6 01       	movw	r22, r12
 668:	0e 94 a4 05 	call	0xb48	; 0xb48 <__cmpsf2>
 66c:	18 16       	cp	r1, r24
 66e:	c4 f0       	brlt	.+48     	; 0x6a0 <mode_select+0x13c>
  {
   PORTD |= 1<<5;									//Keep charging OFF	  	  
 670:	5d 9a       	sbi	0x0b, 5	; 11
   lcd_print("Damaged Battery ");
 672:	84 ec       	ldi	r24, 0xC4	; 196
 674:	91 e0       	ldi	r25, 0x01	; 1
 676:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
 67a:	2f ef       	ldi	r18, 0xFF	; 255
 67c:	89 ef       	ldi	r24, 0xF9	; 249
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	21 50       	subi	r18, 0x01	; 1
 682:	80 40       	sbci	r24, 0x00	; 0
 684:	90 40       	sbci	r25, 0x00	; 0
 686:	e1 f7       	brne	.-8      	; 0x680 <mode_select+0x11c>
 688:	00 c0       	rjmp	.+0      	; 0x68a <mode_select+0x126>
 68a:	00 00       	nop
   _delay_ms(20);
   wrcmd(0xC0);
 68c:	80 ec       	ldi	r24, 0xC0	; 192
 68e:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
   lcd_print("Charging OFF ");
 692:	85 ed       	ldi	r24, 0xD5	; 213
 694:	91 e0       	ldi	r25, 0x01	; 1
 696:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
   measure_bat_voltage();						   //Keep checking current battery voltage 
 69a:	0e 94 ca 01 	call	0x394	; 0x394 <measure_bat_voltage>
 69e:	9e c0       	rjmp	.+316    	; 0x7dc <mode_select+0x278>
  }
  else if((cur_avg_volt / s) < 4.1)			       //If battery is in good condition and voltage is less than 4.1V start charging in CC mode
 6a0:	23 e3       	ldi	r18, 0x33	; 51
 6a2:	33 e3       	ldi	r19, 0x33	; 51
 6a4:	43 e8       	ldi	r20, 0x83	; 131
 6a6:	50 e4       	ldi	r21, 0x40	; 64
 6a8:	c7 01       	movw	r24, r14
 6aa:	b6 01       	movw	r22, r12
 6ac:	0e 94 a4 05 	call	0xb48	; 0xb48 <__cmpsf2>
 6b0:	88 23       	and	r24, r24
 6b2:	f4 f5       	brge	.+124    	; 0x730 <mode_select+0x1cc>
  {
   while((cur_avg_volt / s) < 4.1)
   {  
    wrcmd(0x01);
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
    wrcmd(0x80);
 6ba:	80 e8       	ldi	r24, 0x80	; 128
 6bc:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
    lcd_print("CC Mode");
 6c0:	83 ee       	ldi	r24, 0xE3	; 227
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
 6c8:	2f ef       	ldi	r18, 0xFF	; 255
 6ca:	83 ec       	ldi	r24, 0xC3	; 195
 6cc:	99 e0       	ldi	r25, 0x09	; 9
 6ce:	21 50       	subi	r18, 0x01	; 1
 6d0:	80 40       	sbci	r24, 0x00	; 0
 6d2:	90 40       	sbci	r25, 0x00	; 0
 6d4:	e1 f7       	brne	.-8      	; 0x6ce <mode_select+0x16a>
 6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <mode_select+0x174>
 6d8:	00 00       	nop
    _delay_ms(200);
    PORTD &= 0x9F;								   //Turning on charging in CC mode 
 6da:	8b b1       	in	r24, 0x0b	; 11
 6dc:	8f 79       	andi	r24, 0x9F	; 159
 6de:	8b b9       	out	0x0b, r24	; 11
    measure_bat_voltage();
 6e0:	0e 94 ca 01 	call	0x394	; 0x394 <measure_bat_voltage>
    measure_charge_current();
 6e4:	0e 94 8f 02 	call	0x51e	; 0x51e <measure_charge_current>
    if(str_stp == 0x00)							   //If charging turned OFF through External Interrupt then come out of CC mode and turn off charging
 6e8:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 6ec:	81 11       	cpse	r24, r1
 6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <mode_select+0x194>
    {
	 PORTD |= 3<<5;								   //Turning OFF charging 
 6f0:	8b b1       	in	r24, 0x0b	; 11
 6f2:	80 66       	ori	r24, 0x60	; 96
 6f4:	8b b9       	out	0x0b, r24	; 11
	 break;
 6f6:	72 c0       	rjmp	.+228    	; 0x7dc <mode_select+0x278>
   lcd_print("Charging OFF ");
   measure_bat_voltage();						   //Keep checking current battery voltage 
  }
  else if((cur_avg_volt / s) < 4.1)			       //If battery is in good condition and voltage is less than 4.1V start charging in CC mode
  {
   while((cur_avg_volt / s) < 4.1)
 6f8:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <s>
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatsisf>
 706:	9b 01       	movw	r18, r22
 708:	ac 01       	movw	r20, r24
 70a:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <cur_avg_volt>
 70e:	70 91 83 02 	lds	r23, 0x0283	; 0x800283 <cur_avg_volt+0x1>
 712:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <cur_avg_volt+0x2>
 716:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <cur_avg_volt+0x3>
 71a:	0e 94 a9 05 	call	0xb52	; 0xb52 <__divsf3>
 71e:	23 e3       	ldi	r18, 0x33	; 51
 720:	33 e3       	ldi	r19, 0x33	; 51
 722:	43 e8       	ldi	r20, 0x83	; 131
 724:	50 e4       	ldi	r21, 0x40	; 64
 726:	0e 94 a4 05 	call	0xb48	; 0xb48 <__cmpsf2>
 72a:	88 23       	and	r24, r24
 72c:	1c f2       	brlt	.-122    	; 0x6b4 <mode_select+0x150>
 72e:	56 c0       	rjmp	.+172    	; 0x7dc <mode_select+0x278>
	 PORTD |= 3<<5;								   //Turning OFF charging 
	 break;
    }
   }
  }
  else if((cur_avg_volt / s) > 4.1)				  //If battery voltage is near to full charge voltage shift to CV mode 
 730:	23 e3       	ldi	r18, 0x33	; 51
 732:	33 e3       	ldi	r19, 0x33	; 51
 734:	43 e8       	ldi	r20, 0x83	; 131
 736:	50 e4       	ldi	r21, 0x40	; 64
 738:	c7 01       	movw	r24, r14
 73a:	b6 01       	movw	r22, r12
 73c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <__gesf2>
 740:	18 16       	cp	r1, r24
 742:	14 f1       	brlt	.+68     	; 0x788 <mode_select+0x224>
 744:	4b c0       	rjmp	.+150    	; 0x7dc <mode_select+0x278>
  {
   while((cur_avg_volt / s) < 4.2)
   {	  
    wrcmd(0x01);
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
    wrcmd(0x80);
 74c:	80 e8       	ldi	r24, 0x80	; 128
 74e:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
    lcd_print("CV Mode");
 752:	8b ee       	ldi	r24, 0xEB	; 235
 754:	91 e0       	ldi	r25, 0x01	; 1
 756:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
 75a:	2f ef       	ldi	r18, 0xFF	; 255
 75c:	83 ec       	ldi	r24, 0xC3	; 195
 75e:	99 e0       	ldi	r25, 0x09	; 9
 760:	21 50       	subi	r18, 0x01	; 1
 762:	80 40       	sbci	r24, 0x00	; 0
 764:	90 40       	sbci	r25, 0x00	; 0
 766:	e1 f7       	brne	.-8      	; 0x760 <mode_select+0x1fc>
 768:	00 c0       	rjmp	.+0      	; 0x76a <mode_select+0x206>
 76a:	00 00       	nop
    _delay_ms(200);
    PORTD |= 0b01000000;                          //Shifting to CV mode    
 76c:	5e 9a       	sbi	0x0b, 6	; 11
    PORTD &= 0xDF;								  //Turning ON charging 
 76e:	5d 98       	cbi	0x0b, 5	; 11
    measure_bat_voltage();						  //Keep checking current battery voltage 
 770:	0e 94 ca 01 	call	0x394	; 0x394 <measure_bat_voltage>
    measure_charge_current();					  //Keep checking current battery charging current
 774:	0e 94 8f 02 	call	0x51e	; 0x51e <measure_charge_current>
    if(str_stp == 0x00)							  //If charging turned OFF through External Interrupt then come out of CC mode and turn off charging
 778:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <__data_end>
 77c:	81 11       	cpse	r24, r1
 77e:	04 c0       	rjmp	.+8      	; 0x788 <mode_select+0x224>
    {
	 PORTD |= 3<<5;								  //Turning OFF charging 
 780:	8b b1       	in	r24, 0x0b	; 11
 782:	80 66       	ori	r24, 0x60	; 96
 784:	8b b9       	out	0x0b, r24	; 11
	 break;	
 786:	1b c0       	rjmp	.+54     	; 0x7be <mode_select+0x25a>
    }
   }
  }
  else if((cur_avg_volt / s) > 4.1)				  //If battery voltage is near to full charge voltage shift to CV mode 
  {
   while((cur_avg_volt / s) < 4.2)
 788:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <s>
 78c:	70 e0       	ldi	r23, 0x00	; 0
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 4c 06 	call	0xc98	; 0xc98 <__floatsisf>
 796:	9b 01       	movw	r18, r22
 798:	ac 01       	movw	r20, r24
 79a:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <cur_avg_volt>
 79e:	70 91 83 02 	lds	r23, 0x0283	; 0x800283 <cur_avg_volt+0x1>
 7a2:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <cur_avg_volt+0x2>
 7a6:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <cur_avg_volt+0x3>
 7aa:	0e 94 a9 05 	call	0xb52	; 0xb52 <__divsf3>
 7ae:	26 e6       	ldi	r18, 0x66	; 102
 7b0:	36 e6       	ldi	r19, 0x66	; 102
 7b2:	46 e8       	ldi	r20, 0x86	; 134
 7b4:	50 e4       	ldi	r21, 0x40	; 64
 7b6:	0e 94 a4 05 	call	0xb48	; 0xb48 <__cmpsf2>
 7ba:	88 23       	and	r24, r24
 7bc:	24 f2       	brlt	.-120    	; 0x746 <mode_select+0x1e2>
    {
	 PORTD |= 3<<5;								  //Turning OFF charging 
	 break;	
    }
   }
   wrcmd(0x01);
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
   wrcmd(0x80);
 7c4:	80 e8       	ldi	r24, 0x80	; 128
 7c6:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
   lcd_print("Battery charged ");
 7ca:	83 ef       	ldi	r24, 0xF3	; 243
 7cc:	91 e0       	ldi	r25, 0x01	; 1
 7ce:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
   str_stp = 0x00;								  //Reset the charging turn on flag to turn off state  
 7d2:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <__data_end>
   s = 0;										  //Reset cell count to 0
 7d6:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <s>
   //start=0;
   PORTD |= 1<<5;								  //Turning OFF charging as Battery is fully charged  
 7da:	5d 9a       	sbi	0x0b, 5	; 11
  }	 
 }
}
 7dc:	ff 90       	pop	r15
 7de:	ef 90       	pop	r14
 7e0:	df 90       	pop	r13
 7e2:	cf 90       	pop	r12
 7e4:	08 95       	ret

000007e6 <setup>:

void setup()
{
 7e6:	cf 93       	push	r28
 DDRC = 0b00111100;								  //Setting LCD data pins as output pins
 7e8:	8c e3       	ldi	r24, 0x3C	; 60
 7ea:	87 b9       	out	0x07, r24	; 7
 DDRB = 0b00101111;								  //Setting RS and EN pins for LCD and SS=PB2, MOSI=PB3 & SCK=PB5 pins of SPI as output pins
 7ec:	8f e2       	ldi	r24, 0x2F	; 47
 7ee:	84 b9       	out	0x04, r24	; 4
 DDRD = 0x70;									  //Setting relay pins as output pins
 7f0:	80 e7       	ldi	r24, 0x70	; 112
 7f2:	8a b9       	out	0x0a, r24	; 10
 PORTC = 0b00000011;							  //Setting ADC pins as i/p pins 
 7f4:	c3 e0       	ldi	r28, 0x03	; 3
 7f6:	c8 b9       	out	0x08, r28	; 8
 PORTD = 0x70;									  //Initializing relays' position
 7f8:	8b b9       	out	0x0b, r24	; 11
 PORTD |= 3<<2;  								  //Enabling Internal pull up resistor for interrupt 0 and 1 pins
 7fa:	8b b1       	in	r24, 0x0b	; 11
 7fc:	8c 60       	ori	r24, 0x0C	; 12
 7fe:	8b b9       	out	0x0b, r24	; 11
 lcd_init();									  //Initialize the LCD
 800:	0e 94 04 01 	call	0x208	; 0x208 <lcd_init>
 lcd_print("Getting Ready");
 804:	84 e0       	ldi	r24, 0x04	; 4
 806:	92 e0       	ldi	r25, 0x02	; 2
 808:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
 80c:	2f ef       	ldi	r18, 0xFF	; 255
 80e:	89 e6       	ldi	r24, 0x69	; 105
 810:	98 e1       	ldi	r25, 0x18	; 24
 812:	21 50       	subi	r18, 0x01	; 1
 814:	80 40       	sbci	r24, 0x00	; 0
 816:	90 40       	sbci	r25, 0x00	; 0
 818:	e1 f7       	brne	.-8      	; 0x812 <setup+0x2c>
 81a:	00 c0       	rjmp	.+0      	; 0x81c <setup+0x36>
 81c:	00 00       	nop
 _delay_ms(500);
 sei();											  //Set I bit in SREG to 1 to enable global interrupts
 81e:	78 94       	sei
 ADMUX = 0x40;									  //Setting AVCC with external capacitor at AREF pin with right adjusted result **REFS1  REFS0  ADLAR  –  MUX3  MUX2  MUX1  MUX0 
 820:	80 e4       	ldi	r24, 0x40	; 64
 822:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 ADCSRA = 0x87;									  //Enable ADC with clk rate of 125kHz **ADEN  ADSC  ADATE  ADIF  ADIE  ADPS2  ADPS1  ADPS0 
 826:	87 e8       	ldi	r24, 0x87	; 135
 828:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 DIDR0 = 0x03;									  //Disabling the digital inputs for ADC0 and ADC1 to reduce power consumption ** –  –  ADC5D  ADC4D  ADC3D  ADC2D  ADC1D  ADC0D 
 82c:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
 EIMSK = 0x03;                                    //Enable External interrupts 0 and 1 **  –  –  –  –  –  –  INT1  INT0 
 830:	cd bb       	out	0x1d, r28	; 29
 EICRA = 0x0A;									  //External interrupts 0 and 1 on falling edges ** –  –  –  –  ISC11  ISC10  ISC01  ISC00 
 832:	8a e0       	ldi	r24, 0x0A	; 10
 834:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 SPCR = 0x52;									  //Enable SPI communication, in Master role, with clock frequency = 250kHz, in mode 0 ** SPIE  SPE  DORD  MSTR  CPOL  CPHA  SPR1  SPR0 
 838:	82 e5       	ldi	r24, 0x52	; 82
 83a:	8c bd       	out	0x2c, r24	; 44
 SPSR = 0x00;                                     //Disable 2X speed of SPI communication ** SPIF  WCOL  –  –  –  –  –  SPI2X 
 83c:	1d bc       	out	0x2d, r1	; 45
 PORTB |= 0X04;								      //Set slave select pin to logic 1 to stop SPI communication with MCP4131
 83e:	2a 9a       	sbi	0x05, 2	; 5
}
 840:	cf 91       	pop	r28
 842:	08 95       	ret

00000844 <loop>:

void loop()
{
 844:	8f 92       	push	r8
 846:	9f 92       	push	r9
 848:	af 92       	push	r10
 84a:	bf 92       	push	r11
 84c:	cf 92       	push	r12
 84e:	df 92       	push	r13
 850:	ef 92       	push	r14
 852:	ff 92       	push	r15
 854:	1f 93       	push	r17
 856:	cf 93       	push	r28
 858:	df 93       	push	r29
 85a:	00 d0       	rcall	.+0      	; 0x85c <loop+0x18>
 85c:	00 d0       	rcall	.+0      	; 0x85e <loop+0x1a>
 85e:	cd b7       	in	r28, 0x3d	; 61
 860:	de b7       	in	r29, 0x3e	; 62
 uint16_t tmp;									  //Variable containing float values adjusted to appropriate no. of significants			
 char char_res[4]= {0};                           //Array containing float results in character format
 char th,h,t,u;									  //Digits at Thousand's, Hundredth, Tenth and Unit's place			
 tmp =cur_avg_volt * 100;						  	  
 862:	20 e0       	ldi	r18, 0x00	; 0
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	48 ec       	ldi	r20, 0xC8	; 200
 868:	52 e4       	ldi	r21, 0x42	; 66
 86a:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <cur_avg_volt>
 86e:	70 91 83 02 	lds	r23, 0x0283	; 0x800283 <cur_avg_volt+0x1>
 872:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <cur_avg_volt+0x2>
 876:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <cur_avg_volt+0x3>
 87a:	0e 94 01 07 	call	0xe02	; 0xe02 <__mulsf3>
 87e:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fixunssfsi>
 882:	6b 01       	movw	r12, r22
 884:	7c 01       	movw	r14, r24
 h = ((tmp / 100) + 0x30);
 t = (((tmp % 100) / 10) + 0x30);
 886:	fb 01       	movw	r30, r22
 888:	f6 95       	lsr	r31
 88a:	e7 95       	ror	r30
 88c:	f6 95       	lsr	r31
 88e:	e7 95       	ror	r30
 890:	9f 01       	movw	r18, r30
 892:	ab e7       	ldi	r26, 0x7B	; 123
 894:	b4 e1       	ldi	r27, 0x14	; 20
 896:	0e 94 6e 07 	call	0xedc	; 0xedc <__umulhisi3>
 89a:	ac 01       	movw	r20, r24
 89c:	56 95       	lsr	r21
 89e:	47 95       	ror	r20
 8a0:	14 e6       	ldi	r17, 0x64	; 100
 8a2:	14 9f       	mul	r17, r20
 8a4:	c0 01       	movw	r24, r0
 8a6:	15 9f       	mul	r17, r21
 8a8:	90 0d       	add	r25, r0
 8aa:	11 24       	eor	r1, r1
 8ac:	a6 01       	movw	r20, r12
 8ae:	48 1b       	sub	r20, r24
 8b0:	59 0b       	sbc	r21, r25
 u = ((((tmp % 100) % 10)) + 0x30);
 char_res[0] = h;
 8b2:	0e 94 6e 07 	call	0xedc	; 0xedc <__umulhisi3>
 8b6:	96 95       	lsr	r25
 8b8:	87 95       	ror	r24
 8ba:	80 5d       	subi	r24, 0xD0	; 208
 8bc:	89 83       	std	Y+1, r24	; 0x01
 char_res[1] = '.';
 8be:	8e e2       	ldi	r24, 0x2E	; 46
 8c0:	8a 83       	std	Y+2, r24	; 0x02
 char_res[2] = t;
 8c2:	9a 01       	movw	r18, r20
 8c4:	ad ec       	ldi	r26, 0xCD	; 205
 8c6:	bc ec       	ldi	r27, 0xCC	; 204
 8c8:	0e 94 6e 07 	call	0xedc	; 0xedc <__umulhisi3>
 8cc:	96 95       	lsr	r25
 8ce:	87 95       	ror	r24
 8d0:	96 95       	lsr	r25
 8d2:	87 95       	ror	r24
 8d4:	96 95       	lsr	r25
 8d6:	87 95       	ror	r24
 8d8:	20 e3       	ldi	r18, 0x30	; 48
 8da:	28 0f       	add	r18, r24
 8dc:	2b 83       	std	Y+3, r18	; 0x03
 char_res[3] = u;	  				
 8de:	9c 01       	movw	r18, r24
 8e0:	22 0f       	add	r18, r18
 8e2:	33 1f       	adc	r19, r19
 8e4:	88 0f       	add	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	88 0f       	add	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	88 0f       	add	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	82 0f       	add	r24, r18
 8f2:	93 1f       	adc	r25, r19
 8f4:	48 1b       	sub	r20, r24
 8f6:	59 0b       	sbc	r21, r25
 8f8:	40 5d       	subi	r20, 0xD0	; 208
 8fa:	4c 83       	std	Y+4, r20	; 0x04
 wrcmd(0xC0);
 8fc:	80 ec       	ldi	r24, 0xC0	; 192
 8fe:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
 lcd_print(char_res);
 902:	ce 01       	movw	r24, r28
 904:	01 96       	adiw	r24, 0x01	; 1
 906:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
 lcd_print("V  ");
 90a:	82 e1       	ldi	r24, 0x12	; 18
 90c:	92 e0       	ldi	r25, 0x02	; 2
 90e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
 tmp =cur_avg_curr * 1000;
 912:	20 e0       	ldi	r18, 0x00	; 0
 914:	30 e0       	ldi	r19, 0x00	; 0
 916:	4a e7       	ldi	r20, 0x7A	; 122
 918:	54 e4       	ldi	r21, 0x44	; 68
 91a:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <cur_avg_curr>
 91e:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <cur_avg_curr+0x1>
 922:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <cur_avg_curr+0x2>
 926:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <cur_avg_curr+0x3>
 92a:	0e 94 01 07 	call	0xe02	; 0xe02 <__mulsf3>
 92e:	0e 94 1b 06 	call	0xc36	; 0xc36 <__fixunssfsi>
 932:	4b 01       	movw	r8, r22
 934:	5c 01       	movw	r10, r24
 th = ((tmp / 1000) + 0x30);
 h = (((tmp % 1000) / 100) + 0x30);
 936:	6b 01       	movw	r12, r22
 938:	d6 94       	lsr	r13
 93a:	c7 94       	ror	r12
 93c:	d6 94       	lsr	r13
 93e:	c7 94       	ror	r12
 940:	d6 94       	lsr	r13
 942:	c7 94       	ror	r12
 944:	96 01       	movw	r18, r12
 946:	a5 ec       	ldi	r26, 0xC5	; 197
 948:	b0 e2       	ldi	r27, 0x20	; 32
 94a:	0e 94 6e 07 	call	0xedc	; 0xedc <__umulhisi3>
 94e:	fc 01       	movw	r30, r24
 950:	f2 95       	swap	r31
 952:	e2 95       	swap	r30
 954:	ef 70       	andi	r30, 0x0F	; 15
 956:	ef 27       	eor	r30, r31
 958:	ff 70       	andi	r31, 0x0F	; 15
 95a:	ef 27       	eor	r30, r31
 95c:	28 ee       	ldi	r18, 0xE8	; 232
 95e:	33 e0       	ldi	r19, 0x03	; 3
 960:	e2 9f       	mul	r30, r18
 962:	c0 01       	movw	r24, r0
 964:	e3 9f       	mul	r30, r19
 966:	90 0d       	add	r25, r0
 968:	f2 9f       	mul	r31, r18
 96a:	90 0d       	add	r25, r0
 96c:	11 24       	eor	r1, r1
 96e:	f4 01       	movw	r30, r8
 970:	e8 1b       	sub	r30, r24
 972:	f9 0b       	sbc	r31, r25
 t = ((((tmp % 1000) % 100) / 10) + 0x30);
 974:	7f 01       	movw	r14, r30
 976:	f6 94       	lsr	r15
 978:	e7 94       	ror	r14
 97a:	f6 94       	lsr	r15
 97c:	e7 94       	ror	r14
 97e:	97 01       	movw	r18, r14
 980:	ab e7       	ldi	r26, 0x7B	; 123
 982:	b4 e1       	ldi	r27, 0x14	; 20
 984:	0e 94 6e 07 	call	0xedc	; 0xedc <__umulhisi3>
 988:	ac 01       	movw	r20, r24
 98a:	56 95       	lsr	r21
 98c:	47 95       	ror	r20
 98e:	14 9f       	mul	r17, r20
 990:	c0 01       	movw	r24, r0
 992:	15 9f       	mul	r17, r21
 994:	90 0d       	add	r25, r0
 996:	11 24       	eor	r1, r1
 998:	af 01       	movw	r20, r30
 99a:	48 1b       	sub	r20, r24
 99c:	59 0b       	sbc	r21, r25
 u = ((((tmp % 1000) % 100) % 10) + 0x30);
 char_res[0] = th;
 99e:	96 01       	movw	r18, r12
 9a0:	a5 ec       	ldi	r26, 0xC5	; 197
 9a2:	b0 e2       	ldi	r27, 0x20	; 32
 9a4:	0e 94 6e 07 	call	0xedc	; 0xedc <__umulhisi3>
 9a8:	92 95       	swap	r25
 9aa:	82 95       	swap	r24
 9ac:	8f 70       	andi	r24, 0x0F	; 15
 9ae:	89 27       	eor	r24, r25
 9b0:	9f 70       	andi	r25, 0x0F	; 15
 9b2:	89 27       	eor	r24, r25
 9b4:	80 5d       	subi	r24, 0xD0	; 208
 9b6:	89 83       	std	Y+1, r24	; 0x01
 char_res[1] = h;
 9b8:	97 01       	movw	r18, r14
 9ba:	ab e7       	ldi	r26, 0x7B	; 123
 9bc:	b4 e1       	ldi	r27, 0x14	; 20
 9be:	0e 94 6e 07 	call	0xedc	; 0xedc <__umulhisi3>
 9c2:	96 95       	lsr	r25
 9c4:	87 95       	ror	r24
 9c6:	80 5d       	subi	r24, 0xD0	; 208
 9c8:	8a 83       	std	Y+2, r24	; 0x02
 char_res[2] = t;
 9ca:	9a 01       	movw	r18, r20
 9cc:	ad ec       	ldi	r26, 0xCD	; 205
 9ce:	bc ec       	ldi	r27, 0xCC	; 204
 9d0:	0e 94 6e 07 	call	0xedc	; 0xedc <__umulhisi3>
 9d4:	96 95       	lsr	r25
 9d6:	87 95       	ror	r24
 9d8:	96 95       	lsr	r25
 9da:	87 95       	ror	r24
 9dc:	96 95       	lsr	r25
 9de:	87 95       	ror	r24
 9e0:	20 e3       	ldi	r18, 0x30	; 48
 9e2:	28 0f       	add	r18, r24
 9e4:	2b 83       	std	Y+3, r18	; 0x03
 char_res[3] = u;
 9e6:	9c 01       	movw	r18, r24
 9e8:	22 0f       	add	r18, r18
 9ea:	33 1f       	adc	r19, r19
 9ec:	88 0f       	add	r24, r24
 9ee:	99 1f       	adc	r25, r25
 9f0:	88 0f       	add	r24, r24
 9f2:	99 1f       	adc	r25, r25
 9f4:	88 0f       	add	r24, r24
 9f6:	99 1f       	adc	r25, r25
 9f8:	82 0f       	add	r24, r18
 9fa:	93 1f       	adc	r25, r19
 9fc:	48 1b       	sub	r20, r24
 9fe:	59 0b       	sbc	r21, r25
 a00:	40 5d       	subi	r20, 0xD0	; 208
 a02:	4c 83       	std	Y+4, r20	; 0x04
 wrcmd(0xC8);
 a04:	88 ec       	ldi	r24, 0xC8	; 200
 a06:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
 lcd_print(char_res);
 a0a:	ce 01       	movw	r24, r28
 a0c:	01 96       	adiw	r24, 0x01	; 1
 a0e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
 lcd_print("mA  ");	
 a12:	86 e1       	ldi	r24, 0x16	; 22
 a14:	92 e0       	ldi	r25, 0x02	; 2
 a16:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
 mode_select();
 a1a:	0e 94 b2 02 	call	0x564	; 0x564 <mode_select>
   wrcmd(0x01);
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
   wrcmd(0x80);
 a24:	80 e8       	ldi	r24, 0x80	; 128
 a26:	0e 94 6e 00 	call	0xdc	; 0xdc <wrcmd>
   lcd_print("Battery11");
 a2a:	8b e1       	ldi	r24, 0x1B	; 27
 a2c:	92 e0       	ldi	r25, 0x02	; 2
 a2e:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_print>
 a32:	2f ef       	ldi	r18, 0xFF	; 255
 a34:	83 ec       	ldi	r24, 0xC3	; 195
 a36:	99 e0       	ldi	r25, 0x09	; 9
 a38:	21 50       	subi	r18, 0x01	; 1
 a3a:	80 40       	sbci	r24, 0x00	; 0
 a3c:	90 40       	sbci	r25, 0x00	; 0
 a3e:	e1 f7       	brne	.-8      	; 0xa38 <__stack+0x139>
 a40:	00 c0       	rjmp	.+0      	; 0xa42 <__stack+0x143>
 a42:	00 00       	nop
   _delay_ms(200);
}
 a44:	0f 90       	pop	r0
 a46:	0f 90       	pop	r0
 a48:	0f 90       	pop	r0
 a4a:	0f 90       	pop	r0
 a4c:	df 91       	pop	r29
 a4e:	cf 91       	pop	r28
 a50:	1f 91       	pop	r17
 a52:	ff 90       	pop	r15
 a54:	ef 90       	pop	r14
 a56:	df 90       	pop	r13
 a58:	cf 90       	pop	r12
 a5a:	bf 90       	pop	r11
 a5c:	af 90       	pop	r10
 a5e:	9f 90       	pop	r9
 a60:	8f 90       	pop	r8
 a62:	08 95       	ret

00000a64 <main>:

int main(void)
{
	setup();
 a64:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <setup>
    while (1) 
    {
     loop();
 a68:	0e 94 22 04 	call	0x844	; 0x844 <loop>
 a6c:	fd cf       	rjmp	.-6      	; 0xa68 <main+0x4>

00000a6e <__subsf3>:
 a6e:	50 58       	subi	r21, 0x80	; 128

00000a70 <__addsf3>:
 a70:	bb 27       	eor	r27, r27
 a72:	aa 27       	eor	r26, r26
 a74:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__addsf3x>
 a78:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__fp_round>
 a7c:	0e 94 b4 06 	call	0xd68	; 0xd68 <__fp_pscA>
 a80:	38 f0       	brcs	.+14     	; 0xa90 <__addsf3+0x20>
 a82:	0e 94 bb 06 	call	0xd76	; 0xd76 <__fp_pscB>
 a86:	20 f0       	brcs	.+8      	; 0xa90 <__addsf3+0x20>
 a88:	39 f4       	brne	.+14     	; 0xa98 <__addsf3+0x28>
 a8a:	9f 3f       	cpi	r25, 0xFF	; 255
 a8c:	19 f4       	brne	.+6      	; 0xa94 <__addsf3+0x24>
 a8e:	26 f4       	brtc	.+8      	; 0xa98 <__addsf3+0x28>
 a90:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__fp_nan>
 a94:	0e f4       	brtc	.+2      	; 0xa98 <__addsf3+0x28>
 a96:	e0 95       	com	r30
 a98:	e7 fb       	bst	r30, 7
 a9a:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__fp_inf>

00000a9e <__addsf3x>:
 a9e:	e9 2f       	mov	r30, r25
 aa0:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_split3>
 aa4:	58 f3       	brcs	.-42     	; 0xa7c <__addsf3+0xc>
 aa6:	ba 17       	cp	r27, r26
 aa8:	62 07       	cpc	r22, r18
 aaa:	73 07       	cpc	r23, r19
 aac:	84 07       	cpc	r24, r20
 aae:	95 07       	cpc	r25, r21
 ab0:	20 f0       	brcs	.+8      	; 0xaba <__addsf3x+0x1c>
 ab2:	79 f4       	brne	.+30     	; 0xad2 <__addsf3x+0x34>
 ab4:	a6 f5       	brtc	.+104    	; 0xb1e <__addsf3x+0x80>
 ab6:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__fp_zero>
 aba:	0e f4       	brtc	.+2      	; 0xabe <__addsf3x+0x20>
 abc:	e0 95       	com	r30
 abe:	0b 2e       	mov	r0, r27
 ac0:	ba 2f       	mov	r27, r26
 ac2:	a0 2d       	mov	r26, r0
 ac4:	0b 01       	movw	r0, r22
 ac6:	b9 01       	movw	r22, r18
 ac8:	90 01       	movw	r18, r0
 aca:	0c 01       	movw	r0, r24
 acc:	ca 01       	movw	r24, r20
 ace:	a0 01       	movw	r20, r0
 ad0:	11 24       	eor	r1, r1
 ad2:	ff 27       	eor	r31, r31
 ad4:	59 1b       	sub	r21, r25
 ad6:	99 f0       	breq	.+38     	; 0xafe <__addsf3x+0x60>
 ad8:	59 3f       	cpi	r21, 0xF9	; 249
 ada:	50 f4       	brcc	.+20     	; 0xaf0 <__addsf3x+0x52>
 adc:	50 3e       	cpi	r21, 0xE0	; 224
 ade:	68 f1       	brcs	.+90     	; 0xb3a <__addsf3x+0x9c>
 ae0:	1a 16       	cp	r1, r26
 ae2:	f0 40       	sbci	r31, 0x00	; 0
 ae4:	a2 2f       	mov	r26, r18
 ae6:	23 2f       	mov	r18, r19
 ae8:	34 2f       	mov	r19, r20
 aea:	44 27       	eor	r20, r20
 aec:	58 5f       	subi	r21, 0xF8	; 248
 aee:	f3 cf       	rjmp	.-26     	; 0xad6 <__addsf3x+0x38>
 af0:	46 95       	lsr	r20
 af2:	37 95       	ror	r19
 af4:	27 95       	ror	r18
 af6:	a7 95       	ror	r26
 af8:	f0 40       	sbci	r31, 0x00	; 0
 afa:	53 95       	inc	r21
 afc:	c9 f7       	brne	.-14     	; 0xaf0 <__addsf3x+0x52>
 afe:	7e f4       	brtc	.+30     	; 0xb1e <__addsf3x+0x80>
 b00:	1f 16       	cp	r1, r31
 b02:	ba 0b       	sbc	r27, r26
 b04:	62 0b       	sbc	r22, r18
 b06:	73 0b       	sbc	r23, r19
 b08:	84 0b       	sbc	r24, r20
 b0a:	ba f0       	brmi	.+46     	; 0xb3a <__addsf3x+0x9c>
 b0c:	91 50       	subi	r25, 0x01	; 1
 b0e:	a1 f0       	breq	.+40     	; 0xb38 <__addsf3x+0x9a>
 b10:	ff 0f       	add	r31, r31
 b12:	bb 1f       	adc	r27, r27
 b14:	66 1f       	adc	r22, r22
 b16:	77 1f       	adc	r23, r23
 b18:	88 1f       	adc	r24, r24
 b1a:	c2 f7       	brpl	.-16     	; 0xb0c <__addsf3x+0x6e>
 b1c:	0e c0       	rjmp	.+28     	; 0xb3a <__addsf3x+0x9c>
 b1e:	ba 0f       	add	r27, r26
 b20:	62 1f       	adc	r22, r18
 b22:	73 1f       	adc	r23, r19
 b24:	84 1f       	adc	r24, r20
 b26:	48 f4       	brcc	.+18     	; 0xb3a <__addsf3x+0x9c>
 b28:	87 95       	ror	r24
 b2a:	77 95       	ror	r23
 b2c:	67 95       	ror	r22
 b2e:	b7 95       	ror	r27
 b30:	f7 95       	ror	r31
 b32:	9e 3f       	cpi	r25, 0xFE	; 254
 b34:	08 f0       	brcs	.+2      	; 0xb38 <__addsf3x+0x9a>
 b36:	b0 cf       	rjmp	.-160    	; 0xa98 <__addsf3+0x28>
 b38:	93 95       	inc	r25
 b3a:	88 0f       	add	r24, r24
 b3c:	08 f0       	brcs	.+2      	; 0xb40 <__addsf3x+0xa2>
 b3e:	99 27       	eor	r25, r25
 b40:	ee 0f       	add	r30, r30
 b42:	97 95       	ror	r25
 b44:	87 95       	ror	r24
 b46:	08 95       	ret

00000b48 <__cmpsf2>:
 b48:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fp_cmp>
 b4c:	08 f4       	brcc	.+2      	; 0xb50 <__cmpsf2+0x8>
 b4e:	81 e0       	ldi	r24, 0x01	; 1
 b50:	08 95       	ret

00000b52 <__divsf3>:
 b52:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divsf3x>
 b56:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__fp_round>
 b5a:	0e 94 bb 06 	call	0xd76	; 0xd76 <__fp_pscB>
 b5e:	58 f0       	brcs	.+22     	; 0xb76 <__divsf3+0x24>
 b60:	0e 94 b4 06 	call	0xd68	; 0xd68 <__fp_pscA>
 b64:	40 f0       	brcs	.+16     	; 0xb76 <__divsf3+0x24>
 b66:	29 f4       	brne	.+10     	; 0xb72 <__divsf3+0x20>
 b68:	5f 3f       	cpi	r21, 0xFF	; 255
 b6a:	29 f0       	breq	.+10     	; 0xb76 <__divsf3+0x24>
 b6c:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__fp_inf>
 b70:	51 11       	cpse	r21, r1
 b72:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__fp_szero>
 b76:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__fp_nan>

00000b7a <__divsf3x>:
 b7a:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_split3>
 b7e:	68 f3       	brcs	.-38     	; 0xb5a <__divsf3+0x8>

00000b80 <__divsf3_pse>:
 b80:	99 23       	and	r25, r25
 b82:	b1 f3       	breq	.-20     	; 0xb70 <__divsf3+0x1e>
 b84:	55 23       	and	r21, r21
 b86:	91 f3       	breq	.-28     	; 0xb6c <__divsf3+0x1a>
 b88:	95 1b       	sub	r25, r21
 b8a:	55 0b       	sbc	r21, r21
 b8c:	bb 27       	eor	r27, r27
 b8e:	aa 27       	eor	r26, r26
 b90:	62 17       	cp	r22, r18
 b92:	73 07       	cpc	r23, r19
 b94:	84 07       	cpc	r24, r20
 b96:	38 f0       	brcs	.+14     	; 0xba6 <__divsf3_pse+0x26>
 b98:	9f 5f       	subi	r25, 0xFF	; 255
 b9a:	5f 4f       	sbci	r21, 0xFF	; 255
 b9c:	22 0f       	add	r18, r18
 b9e:	33 1f       	adc	r19, r19
 ba0:	44 1f       	adc	r20, r20
 ba2:	aa 1f       	adc	r26, r26
 ba4:	a9 f3       	breq	.-22     	; 0xb90 <__divsf3_pse+0x10>
 ba6:	35 d0       	rcall	.+106    	; 0xc12 <__divsf3_pse+0x92>
 ba8:	0e 2e       	mov	r0, r30
 baa:	3a f0       	brmi	.+14     	; 0xbba <__divsf3_pse+0x3a>
 bac:	e0 e8       	ldi	r30, 0x80	; 128
 bae:	32 d0       	rcall	.+100    	; 0xc14 <__divsf3_pse+0x94>
 bb0:	91 50       	subi	r25, 0x01	; 1
 bb2:	50 40       	sbci	r21, 0x00	; 0
 bb4:	e6 95       	lsr	r30
 bb6:	00 1c       	adc	r0, r0
 bb8:	ca f7       	brpl	.-14     	; 0xbac <__divsf3_pse+0x2c>
 bba:	2b d0       	rcall	.+86     	; 0xc12 <__divsf3_pse+0x92>
 bbc:	fe 2f       	mov	r31, r30
 bbe:	29 d0       	rcall	.+82     	; 0xc12 <__divsf3_pse+0x92>
 bc0:	66 0f       	add	r22, r22
 bc2:	77 1f       	adc	r23, r23
 bc4:	88 1f       	adc	r24, r24
 bc6:	bb 1f       	adc	r27, r27
 bc8:	26 17       	cp	r18, r22
 bca:	37 07       	cpc	r19, r23
 bcc:	48 07       	cpc	r20, r24
 bce:	ab 07       	cpc	r26, r27
 bd0:	b0 e8       	ldi	r27, 0x80	; 128
 bd2:	09 f0       	breq	.+2      	; 0xbd6 <__divsf3_pse+0x56>
 bd4:	bb 0b       	sbc	r27, r27
 bd6:	80 2d       	mov	r24, r0
 bd8:	bf 01       	movw	r22, r30
 bda:	ff 27       	eor	r31, r31
 bdc:	93 58       	subi	r25, 0x83	; 131
 bde:	5f 4f       	sbci	r21, 0xFF	; 255
 be0:	3a f0       	brmi	.+14     	; 0xbf0 <__divsf3_pse+0x70>
 be2:	9e 3f       	cpi	r25, 0xFE	; 254
 be4:	51 05       	cpc	r21, r1
 be6:	78 f0       	brcs	.+30     	; 0xc06 <__divsf3_pse+0x86>
 be8:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__fp_inf>
 bec:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__fp_szero>
 bf0:	5f 3f       	cpi	r21, 0xFF	; 255
 bf2:	e4 f3       	brlt	.-8      	; 0xbec <__divsf3_pse+0x6c>
 bf4:	98 3e       	cpi	r25, 0xE8	; 232
 bf6:	d4 f3       	brlt	.-12     	; 0xbec <__divsf3_pse+0x6c>
 bf8:	86 95       	lsr	r24
 bfa:	77 95       	ror	r23
 bfc:	67 95       	ror	r22
 bfe:	b7 95       	ror	r27
 c00:	f7 95       	ror	r31
 c02:	9f 5f       	subi	r25, 0xFF	; 255
 c04:	c9 f7       	brne	.-14     	; 0xbf8 <__divsf3_pse+0x78>
 c06:	88 0f       	add	r24, r24
 c08:	91 1d       	adc	r25, r1
 c0a:	96 95       	lsr	r25
 c0c:	87 95       	ror	r24
 c0e:	97 f9       	bld	r25, 7
 c10:	08 95       	ret
 c12:	e1 e0       	ldi	r30, 0x01	; 1
 c14:	66 0f       	add	r22, r22
 c16:	77 1f       	adc	r23, r23
 c18:	88 1f       	adc	r24, r24
 c1a:	bb 1f       	adc	r27, r27
 c1c:	62 17       	cp	r22, r18
 c1e:	73 07       	cpc	r23, r19
 c20:	84 07       	cpc	r24, r20
 c22:	ba 07       	cpc	r27, r26
 c24:	20 f0       	brcs	.+8      	; 0xc2e <__divsf3_pse+0xae>
 c26:	62 1b       	sub	r22, r18
 c28:	73 0b       	sbc	r23, r19
 c2a:	84 0b       	sbc	r24, r20
 c2c:	ba 0b       	sbc	r27, r26
 c2e:	ee 1f       	adc	r30, r30
 c30:	88 f7       	brcc	.-30     	; 0xc14 <__divsf3_pse+0x94>
 c32:	e0 95       	com	r30
 c34:	08 95       	ret

00000c36 <__fixunssfsi>:
 c36:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__fp_splitA>
 c3a:	88 f0       	brcs	.+34     	; 0xc5e <__fixunssfsi+0x28>
 c3c:	9f 57       	subi	r25, 0x7F	; 127
 c3e:	98 f0       	brcs	.+38     	; 0xc66 <__fixunssfsi+0x30>
 c40:	b9 2f       	mov	r27, r25
 c42:	99 27       	eor	r25, r25
 c44:	b7 51       	subi	r27, 0x17	; 23
 c46:	b0 f0       	brcs	.+44     	; 0xc74 <__fixunssfsi+0x3e>
 c48:	e1 f0       	breq	.+56     	; 0xc82 <__fixunssfsi+0x4c>
 c4a:	66 0f       	add	r22, r22
 c4c:	77 1f       	adc	r23, r23
 c4e:	88 1f       	adc	r24, r24
 c50:	99 1f       	adc	r25, r25
 c52:	1a f0       	brmi	.+6      	; 0xc5a <__fixunssfsi+0x24>
 c54:	ba 95       	dec	r27
 c56:	c9 f7       	brne	.-14     	; 0xc4a <__fixunssfsi+0x14>
 c58:	14 c0       	rjmp	.+40     	; 0xc82 <__fixunssfsi+0x4c>
 c5a:	b1 30       	cpi	r27, 0x01	; 1
 c5c:	91 f0       	breq	.+36     	; 0xc82 <__fixunssfsi+0x4c>
 c5e:	0e 94 f5 06 	call	0xdea	; 0xdea <__fp_zero>
 c62:	b1 e0       	ldi	r27, 0x01	; 1
 c64:	08 95       	ret
 c66:	0c 94 f5 06 	jmp	0xdea	; 0xdea <__fp_zero>
 c6a:	67 2f       	mov	r22, r23
 c6c:	78 2f       	mov	r23, r24
 c6e:	88 27       	eor	r24, r24
 c70:	b8 5f       	subi	r27, 0xF8	; 248
 c72:	39 f0       	breq	.+14     	; 0xc82 <__fixunssfsi+0x4c>
 c74:	b9 3f       	cpi	r27, 0xF9	; 249
 c76:	cc f3       	brlt	.-14     	; 0xc6a <__fixunssfsi+0x34>
 c78:	86 95       	lsr	r24
 c7a:	77 95       	ror	r23
 c7c:	67 95       	ror	r22
 c7e:	b3 95       	inc	r27
 c80:	d9 f7       	brne	.-10     	; 0xc78 <__fixunssfsi+0x42>
 c82:	3e f4       	brtc	.+14     	; 0xc92 <__fixunssfsi+0x5c>
 c84:	90 95       	com	r25
 c86:	80 95       	com	r24
 c88:	70 95       	com	r23
 c8a:	61 95       	neg	r22
 c8c:	7f 4f       	sbci	r23, 0xFF	; 255
 c8e:	8f 4f       	sbci	r24, 0xFF	; 255
 c90:	9f 4f       	sbci	r25, 0xFF	; 255
 c92:	08 95       	ret

00000c94 <__floatunsisf>:
 c94:	e8 94       	clt
 c96:	09 c0       	rjmp	.+18     	; 0xcaa <__floatsisf+0x12>

00000c98 <__floatsisf>:
 c98:	97 fb       	bst	r25, 7
 c9a:	3e f4       	brtc	.+14     	; 0xcaa <__floatsisf+0x12>
 c9c:	90 95       	com	r25
 c9e:	80 95       	com	r24
 ca0:	70 95       	com	r23
 ca2:	61 95       	neg	r22
 ca4:	7f 4f       	sbci	r23, 0xFF	; 255
 ca6:	8f 4f       	sbci	r24, 0xFF	; 255
 ca8:	9f 4f       	sbci	r25, 0xFF	; 255
 caa:	99 23       	and	r25, r25
 cac:	a9 f0       	breq	.+42     	; 0xcd8 <__floatsisf+0x40>
 cae:	f9 2f       	mov	r31, r25
 cb0:	96 e9       	ldi	r25, 0x96	; 150
 cb2:	bb 27       	eor	r27, r27
 cb4:	93 95       	inc	r25
 cb6:	f6 95       	lsr	r31
 cb8:	87 95       	ror	r24
 cba:	77 95       	ror	r23
 cbc:	67 95       	ror	r22
 cbe:	b7 95       	ror	r27
 cc0:	f1 11       	cpse	r31, r1
 cc2:	f8 cf       	rjmp	.-16     	; 0xcb4 <__floatsisf+0x1c>
 cc4:	fa f4       	brpl	.+62     	; 0xd04 <__floatsisf+0x6c>
 cc6:	bb 0f       	add	r27, r27
 cc8:	11 f4       	brne	.+4      	; 0xcce <__floatsisf+0x36>
 cca:	60 ff       	sbrs	r22, 0
 ccc:	1b c0       	rjmp	.+54     	; 0xd04 <__floatsisf+0x6c>
 cce:	6f 5f       	subi	r22, 0xFF	; 255
 cd0:	7f 4f       	sbci	r23, 0xFF	; 255
 cd2:	8f 4f       	sbci	r24, 0xFF	; 255
 cd4:	9f 4f       	sbci	r25, 0xFF	; 255
 cd6:	16 c0       	rjmp	.+44     	; 0xd04 <__floatsisf+0x6c>
 cd8:	88 23       	and	r24, r24
 cda:	11 f0       	breq	.+4      	; 0xce0 <__floatsisf+0x48>
 cdc:	96 e9       	ldi	r25, 0x96	; 150
 cde:	11 c0       	rjmp	.+34     	; 0xd02 <__floatsisf+0x6a>
 ce0:	77 23       	and	r23, r23
 ce2:	21 f0       	breq	.+8      	; 0xcec <__floatsisf+0x54>
 ce4:	9e e8       	ldi	r25, 0x8E	; 142
 ce6:	87 2f       	mov	r24, r23
 ce8:	76 2f       	mov	r23, r22
 cea:	05 c0       	rjmp	.+10     	; 0xcf6 <__floatsisf+0x5e>
 cec:	66 23       	and	r22, r22
 cee:	71 f0       	breq	.+28     	; 0xd0c <__floatsisf+0x74>
 cf0:	96 e8       	ldi	r25, 0x86	; 134
 cf2:	86 2f       	mov	r24, r22
 cf4:	70 e0       	ldi	r23, 0x00	; 0
 cf6:	60 e0       	ldi	r22, 0x00	; 0
 cf8:	2a f0       	brmi	.+10     	; 0xd04 <__floatsisf+0x6c>
 cfa:	9a 95       	dec	r25
 cfc:	66 0f       	add	r22, r22
 cfe:	77 1f       	adc	r23, r23
 d00:	88 1f       	adc	r24, r24
 d02:	da f7       	brpl	.-10     	; 0xcfa <__floatsisf+0x62>
 d04:	88 0f       	add	r24, r24
 d06:	96 95       	lsr	r25
 d08:	87 95       	ror	r24
 d0a:	97 f9       	bld	r25, 7
 d0c:	08 95       	ret

00000d0e <__fp_cmp>:
 d0e:	99 0f       	add	r25, r25
 d10:	00 08       	sbc	r0, r0
 d12:	55 0f       	add	r21, r21
 d14:	aa 0b       	sbc	r26, r26
 d16:	e0 e8       	ldi	r30, 0x80	; 128
 d18:	fe ef       	ldi	r31, 0xFE	; 254
 d1a:	16 16       	cp	r1, r22
 d1c:	17 06       	cpc	r1, r23
 d1e:	e8 07       	cpc	r30, r24
 d20:	f9 07       	cpc	r31, r25
 d22:	c0 f0       	brcs	.+48     	; 0xd54 <__fp_cmp+0x46>
 d24:	12 16       	cp	r1, r18
 d26:	13 06       	cpc	r1, r19
 d28:	e4 07       	cpc	r30, r20
 d2a:	f5 07       	cpc	r31, r21
 d2c:	98 f0       	brcs	.+38     	; 0xd54 <__fp_cmp+0x46>
 d2e:	62 1b       	sub	r22, r18
 d30:	73 0b       	sbc	r23, r19
 d32:	84 0b       	sbc	r24, r20
 d34:	95 0b       	sbc	r25, r21
 d36:	39 f4       	brne	.+14     	; 0xd46 <__fp_cmp+0x38>
 d38:	0a 26       	eor	r0, r26
 d3a:	61 f0       	breq	.+24     	; 0xd54 <__fp_cmp+0x46>
 d3c:	23 2b       	or	r18, r19
 d3e:	24 2b       	or	r18, r20
 d40:	25 2b       	or	r18, r21
 d42:	21 f4       	brne	.+8      	; 0xd4c <__fp_cmp+0x3e>
 d44:	08 95       	ret
 d46:	0a 26       	eor	r0, r26
 d48:	09 f4       	brne	.+2      	; 0xd4c <__fp_cmp+0x3e>
 d4a:	a1 40       	sbci	r26, 0x01	; 1
 d4c:	a6 95       	lsr	r26
 d4e:	8f ef       	ldi	r24, 0xFF	; 255
 d50:	81 1d       	adc	r24, r1
 d52:	81 1d       	adc	r24, r1
 d54:	08 95       	ret

00000d56 <__fp_inf>:
 d56:	97 f9       	bld	r25, 7
 d58:	9f 67       	ori	r25, 0x7F	; 127
 d5a:	80 e8       	ldi	r24, 0x80	; 128
 d5c:	70 e0       	ldi	r23, 0x00	; 0
 d5e:	60 e0       	ldi	r22, 0x00	; 0
 d60:	08 95       	ret

00000d62 <__fp_nan>:
 d62:	9f ef       	ldi	r25, 0xFF	; 255
 d64:	80 ec       	ldi	r24, 0xC0	; 192
 d66:	08 95       	ret

00000d68 <__fp_pscA>:
 d68:	00 24       	eor	r0, r0
 d6a:	0a 94       	dec	r0
 d6c:	16 16       	cp	r1, r22
 d6e:	17 06       	cpc	r1, r23
 d70:	18 06       	cpc	r1, r24
 d72:	09 06       	cpc	r0, r25
 d74:	08 95       	ret

00000d76 <__fp_pscB>:
 d76:	00 24       	eor	r0, r0
 d78:	0a 94       	dec	r0
 d7a:	12 16       	cp	r1, r18
 d7c:	13 06       	cpc	r1, r19
 d7e:	14 06       	cpc	r1, r20
 d80:	05 06       	cpc	r0, r21
 d82:	08 95       	ret

00000d84 <__fp_round>:
 d84:	09 2e       	mov	r0, r25
 d86:	03 94       	inc	r0
 d88:	00 0c       	add	r0, r0
 d8a:	11 f4       	brne	.+4      	; 0xd90 <__fp_round+0xc>
 d8c:	88 23       	and	r24, r24
 d8e:	52 f0       	brmi	.+20     	; 0xda4 <__fp_round+0x20>
 d90:	bb 0f       	add	r27, r27
 d92:	40 f4       	brcc	.+16     	; 0xda4 <__fp_round+0x20>
 d94:	bf 2b       	or	r27, r31
 d96:	11 f4       	brne	.+4      	; 0xd9c <__fp_round+0x18>
 d98:	60 ff       	sbrs	r22, 0
 d9a:	04 c0       	rjmp	.+8      	; 0xda4 <__fp_round+0x20>
 d9c:	6f 5f       	subi	r22, 0xFF	; 255
 d9e:	7f 4f       	sbci	r23, 0xFF	; 255
 da0:	8f 4f       	sbci	r24, 0xFF	; 255
 da2:	9f 4f       	sbci	r25, 0xFF	; 255
 da4:	08 95       	ret

00000da6 <__fp_split3>:
 da6:	57 fd       	sbrc	r21, 7
 da8:	90 58       	subi	r25, 0x80	; 128
 daa:	44 0f       	add	r20, r20
 dac:	55 1f       	adc	r21, r21
 dae:	59 f0       	breq	.+22     	; 0xdc6 <__fp_splitA+0x10>
 db0:	5f 3f       	cpi	r21, 0xFF	; 255
 db2:	71 f0       	breq	.+28     	; 0xdd0 <__fp_splitA+0x1a>
 db4:	47 95       	ror	r20

00000db6 <__fp_splitA>:
 db6:	88 0f       	add	r24, r24
 db8:	97 fb       	bst	r25, 7
 dba:	99 1f       	adc	r25, r25
 dbc:	61 f0       	breq	.+24     	; 0xdd6 <__fp_splitA+0x20>
 dbe:	9f 3f       	cpi	r25, 0xFF	; 255
 dc0:	79 f0       	breq	.+30     	; 0xde0 <__fp_splitA+0x2a>
 dc2:	87 95       	ror	r24
 dc4:	08 95       	ret
 dc6:	12 16       	cp	r1, r18
 dc8:	13 06       	cpc	r1, r19
 dca:	14 06       	cpc	r1, r20
 dcc:	55 1f       	adc	r21, r21
 dce:	f2 cf       	rjmp	.-28     	; 0xdb4 <__fp_split3+0xe>
 dd0:	46 95       	lsr	r20
 dd2:	f1 df       	rcall	.-30     	; 0xdb6 <__fp_splitA>
 dd4:	08 c0       	rjmp	.+16     	; 0xde6 <__fp_splitA+0x30>
 dd6:	16 16       	cp	r1, r22
 dd8:	17 06       	cpc	r1, r23
 dda:	18 06       	cpc	r1, r24
 ddc:	99 1f       	adc	r25, r25
 dde:	f1 cf       	rjmp	.-30     	; 0xdc2 <__fp_splitA+0xc>
 de0:	86 95       	lsr	r24
 de2:	71 05       	cpc	r23, r1
 de4:	61 05       	cpc	r22, r1
 de6:	08 94       	sec
 de8:	08 95       	ret

00000dea <__fp_zero>:
 dea:	e8 94       	clt

00000dec <__fp_szero>:
 dec:	bb 27       	eor	r27, r27
 dee:	66 27       	eor	r22, r22
 df0:	77 27       	eor	r23, r23
 df2:	cb 01       	movw	r24, r22
 df4:	97 f9       	bld	r25, 7
 df6:	08 95       	ret

00000df8 <__gesf2>:
 df8:	0e 94 87 06 	call	0xd0e	; 0xd0e <__fp_cmp>
 dfc:	08 f4       	brcc	.+2      	; 0xe00 <__gesf2+0x8>
 dfe:	8f ef       	ldi	r24, 0xFF	; 255
 e00:	08 95       	ret

00000e02 <__mulsf3>:
 e02:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3x>
 e06:	0c 94 c2 06 	jmp	0xd84	; 0xd84 <__fp_round>
 e0a:	0e 94 b4 06 	call	0xd68	; 0xd68 <__fp_pscA>
 e0e:	38 f0       	brcs	.+14     	; 0xe1e <__mulsf3+0x1c>
 e10:	0e 94 bb 06 	call	0xd76	; 0xd76 <__fp_pscB>
 e14:	20 f0       	brcs	.+8      	; 0xe1e <__mulsf3+0x1c>
 e16:	95 23       	and	r25, r21
 e18:	11 f0       	breq	.+4      	; 0xe1e <__mulsf3+0x1c>
 e1a:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__fp_inf>
 e1e:	0c 94 b1 06 	jmp	0xd62	; 0xd62 <__fp_nan>
 e22:	11 24       	eor	r1, r1
 e24:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__fp_szero>

00000e28 <__mulsf3x>:
 e28:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_split3>
 e2c:	70 f3       	brcs	.-36     	; 0xe0a <__mulsf3+0x8>

00000e2e <__mulsf3_pse>:
 e2e:	95 9f       	mul	r25, r21
 e30:	c1 f3       	breq	.-16     	; 0xe22 <__mulsf3+0x20>
 e32:	95 0f       	add	r25, r21
 e34:	50 e0       	ldi	r21, 0x00	; 0
 e36:	55 1f       	adc	r21, r21
 e38:	62 9f       	mul	r22, r18
 e3a:	f0 01       	movw	r30, r0
 e3c:	72 9f       	mul	r23, r18
 e3e:	bb 27       	eor	r27, r27
 e40:	f0 0d       	add	r31, r0
 e42:	b1 1d       	adc	r27, r1
 e44:	63 9f       	mul	r22, r19
 e46:	aa 27       	eor	r26, r26
 e48:	f0 0d       	add	r31, r0
 e4a:	b1 1d       	adc	r27, r1
 e4c:	aa 1f       	adc	r26, r26
 e4e:	64 9f       	mul	r22, r20
 e50:	66 27       	eor	r22, r22
 e52:	b0 0d       	add	r27, r0
 e54:	a1 1d       	adc	r26, r1
 e56:	66 1f       	adc	r22, r22
 e58:	82 9f       	mul	r24, r18
 e5a:	22 27       	eor	r18, r18
 e5c:	b0 0d       	add	r27, r0
 e5e:	a1 1d       	adc	r26, r1
 e60:	62 1f       	adc	r22, r18
 e62:	73 9f       	mul	r23, r19
 e64:	b0 0d       	add	r27, r0
 e66:	a1 1d       	adc	r26, r1
 e68:	62 1f       	adc	r22, r18
 e6a:	83 9f       	mul	r24, r19
 e6c:	a0 0d       	add	r26, r0
 e6e:	61 1d       	adc	r22, r1
 e70:	22 1f       	adc	r18, r18
 e72:	74 9f       	mul	r23, r20
 e74:	33 27       	eor	r19, r19
 e76:	a0 0d       	add	r26, r0
 e78:	61 1d       	adc	r22, r1
 e7a:	23 1f       	adc	r18, r19
 e7c:	84 9f       	mul	r24, r20
 e7e:	60 0d       	add	r22, r0
 e80:	21 1d       	adc	r18, r1
 e82:	82 2f       	mov	r24, r18
 e84:	76 2f       	mov	r23, r22
 e86:	6a 2f       	mov	r22, r26
 e88:	11 24       	eor	r1, r1
 e8a:	9f 57       	subi	r25, 0x7F	; 127
 e8c:	50 40       	sbci	r21, 0x00	; 0
 e8e:	9a f0       	brmi	.+38     	; 0xeb6 <__mulsf3_pse+0x88>
 e90:	f1 f0       	breq	.+60     	; 0xece <__mulsf3_pse+0xa0>
 e92:	88 23       	and	r24, r24
 e94:	4a f0       	brmi	.+18     	; 0xea8 <__mulsf3_pse+0x7a>
 e96:	ee 0f       	add	r30, r30
 e98:	ff 1f       	adc	r31, r31
 e9a:	bb 1f       	adc	r27, r27
 e9c:	66 1f       	adc	r22, r22
 e9e:	77 1f       	adc	r23, r23
 ea0:	88 1f       	adc	r24, r24
 ea2:	91 50       	subi	r25, 0x01	; 1
 ea4:	50 40       	sbci	r21, 0x00	; 0
 ea6:	a9 f7       	brne	.-22     	; 0xe92 <__mulsf3_pse+0x64>
 ea8:	9e 3f       	cpi	r25, 0xFE	; 254
 eaa:	51 05       	cpc	r21, r1
 eac:	80 f0       	brcs	.+32     	; 0xece <__mulsf3_pse+0xa0>
 eae:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__fp_inf>
 eb2:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__fp_szero>
 eb6:	5f 3f       	cpi	r21, 0xFF	; 255
 eb8:	e4 f3       	brlt	.-8      	; 0xeb2 <__mulsf3_pse+0x84>
 eba:	98 3e       	cpi	r25, 0xE8	; 232
 ebc:	d4 f3       	brlt	.-12     	; 0xeb2 <__mulsf3_pse+0x84>
 ebe:	86 95       	lsr	r24
 ec0:	77 95       	ror	r23
 ec2:	67 95       	ror	r22
 ec4:	b7 95       	ror	r27
 ec6:	f7 95       	ror	r31
 ec8:	e7 95       	ror	r30
 eca:	9f 5f       	subi	r25, 0xFF	; 255
 ecc:	c1 f7       	brne	.-16     	; 0xebe <__mulsf3_pse+0x90>
 ece:	fe 2b       	or	r31, r30
 ed0:	88 0f       	add	r24, r24
 ed2:	91 1d       	adc	r25, r1
 ed4:	96 95       	lsr	r25
 ed6:	87 95       	ror	r24
 ed8:	97 f9       	bld	r25, 7
 eda:	08 95       	ret

00000edc <__umulhisi3>:
 edc:	a2 9f       	mul	r26, r18
 ede:	b0 01       	movw	r22, r0
 ee0:	b3 9f       	mul	r27, r19
 ee2:	c0 01       	movw	r24, r0
 ee4:	a3 9f       	mul	r26, r19
 ee6:	70 0d       	add	r23, r0
 ee8:	81 1d       	adc	r24, r1
 eea:	11 24       	eor	r1, r1
 eec:	91 1d       	adc	r25, r1
 eee:	b2 9f       	mul	r27, r18
 ef0:	70 0d       	add	r23, r0
 ef2:	81 1d       	adc	r24, r1
 ef4:	11 24       	eor	r1, r1
 ef6:	91 1d       	adc	r25, r1
 ef8:	08 95       	ret

00000efa <_exit>:
 efa:	f8 94       	cli

00000efc <__stop_program>:
 efc:	ff cf       	rjmp	.-2      	; 0xefc <__stop_program>
